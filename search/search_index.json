{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Folder structure \u251c\u2500\u2500\u2500helper \u251c\u2500\u2500\u2500admin \u2514\u2500\u2500\u2500partners \u2514\u2500\u2500\u2500staff ApplicationHelper module The ApplicationHelper module is a utility module that provides a set of helper methods that can be used in views and controllers throughout a Ruby on Rails application. Here is a description of the title method you provided: Description: This method sets the title of the page by setting the value of the :title content variable. Input parameters: text: A string containing the title text to set. Output values: None. Error conditions: None. Examples of usage: Here's an example of how you might use the title method in a view: <% title 'My Page' %> This would set the :title content variable to 'My Page', which could then be used to set the title of the page in the layout file. For example: <title><%= content_for :title %></title> This would insert the value of the :title content variable into the title element of the page. subdomain function Description: This function generates a URL for a given subdomain by concatenating the subdomain with the host of the application. Input parameters: subdomain (string): The subdomain to be used in the generated URL. This parameter is optional, and if it is not provided, the function will use an empty string as the subdomain. Output values: A string containing the generated URL. Error conditions: None. Examples of usage: with_subdomain(\"test\") # returns \"test.localhost\" (assuming the host of the application is \"localhost\") with_subdomain(nil) # returns \"localhost\" with_subdomain(\"\") # returns \"localhost\" url_for function : Description: This function generates a URL based on the provided options. If the :subdomain option is present, it will be used to generate the URL using the with_subdomain function. Input parameters: options (hash): A hash of options to be used to generate the URL. This parameter is optional, and if it is not provided, the function will use the default options. Output values: A string containing the generated URL. Error conditions: None. Examples of usage: url_for(subdomain: \"test\") # returns \"test.localhost\" (assuming the host of the application is \"localhost\") url_for(host: \"example.com\") # returns \"example.com\" url_for # returns the default URL for the application","title":"Folder structure"},{"location":"#folder-structure","text":"\u251c\u2500\u2500\u2500helper \u251c\u2500\u2500\u2500admin \u2514\u2500\u2500\u2500partners \u2514\u2500\u2500\u2500staff","title":"Folder structure"},{"location":"#applicationhelper-module","text":"The ApplicationHelper module is a utility module that provides a set of helper methods that can be used in views and controllers throughout a Ruby on Rails application. Here is a description of the title method you provided: Description: This method sets the title of the page by setting the value of the :title content variable. Input parameters: text: A string containing the title text to set. Output values: None. Error conditions: None. Examples of usage: Here's an example of how you might use the title method in a view: <% title 'My Page' %> This would set the :title content variable to 'My Page', which could then be used to set the title of the page in the layout file. For example: <title><%= content_for :title %></title> This would insert the value of the :title content variable into the title element of the page.","title":"ApplicationHelper module"},{"location":"#subdomain-function","text":"Description: This function generates a URL for a given subdomain by concatenating the subdomain with the host of the application. Input parameters: subdomain (string): The subdomain to be used in the generated URL. This parameter is optional, and if it is not provided, the function will use an empty string as the subdomain. Output values: A string containing the generated URL. Error conditions: None. Examples of usage: with_subdomain(\"test\") # returns \"test.localhost\" (assuming the host of the application is \"localhost\") with_subdomain(nil) # returns \"localhost\" with_subdomain(\"\") # returns \"localhost\" url_for function : Description: This function generates a URL based on the provided options. If the :subdomain option is present, it will be used to generate the URL using the with_subdomain function. Input parameters: options (hash): A hash of options to be used to generate the URL. This parameter is optional, and if it is not provided, the function will use the default options. Output values: A string containing the generated URL. Error conditions: None. Examples of usage: url_for(subdomain: \"test\") # returns \"test.localhost\" (assuming the host of the application is \"localhost\") url_for(host: \"example.com\") # returns \"example.com\" url_for # returns the default URL for the application","title":"subdomain function"},{"location":"controller/","text":"Folder structure \u251c\u2500\u2500\u2500controllers \u251c\u2500\u2500\u2500admin \u2502 \u251c\u2500\u2500\u2500articles | | \u2502 \u251c\u2500\u2500\u2500categories \u2502 \u251c\u2500\u2500\u2500partner_categories \u2502 \u251c\u2500\u2500\u2500staff \u2502 \u2514\u2500\u2500\u2500vista_admins \u251c\u2500\u2500\u2500api \u2502 \u251c\u2500\u2500\u2500admin \u2502 \u2502 \u251c\u2500\u2500\u2500branches \u2502 \u2502 \u2514\u2500\u2500\u2500staff_members \u2502 \u251c\u2500\u2500\u2500partners \u2502 \u2502 \u2514\u2500\u2500\u2500v1 \u2502 \u2502 \u251c\u2500\u2500\u2500management \u2502 \u2502 \u2514\u2500\u2500\u2500staff \u2502 \u2514\u2500\u2500\u2500v1 \u2502 \u251c\u2500\u2500\u2500branches \u2502 \u251c\u2500\u2500\u2500categories \u2502 \u251c\u2500\u2500\u2500questions \u2502 \u251c\u2500\u2500\u2500sync \u2502 \u2514\u2500\u2500\u2500users \u251c\u2500\u2500\u2500concerns \u2514\u2500\u2500\u2500partners \u251c\u2500\u2500\u2500staff \u2514\u2500\u2500\u2500staff_members ApplicationController The ApplicationController is a base class for all the controllers in a Ruby on Rails application. It provides a number of common features that are useful in most controllers, such as support for flash messages and handling of exceptions. Here is a description of each part of the ApplicationController: include Pundit: This line includes the Pundit module, which provides a set of helper methods for authorization in the controller. protect_from_forgery with: :exception: This line enables protection against cross-site request forgery (CSRF) attacks. If a request is determined to be a forgery, an exception will be raised. add_flash_types :success, :error, :warning: This line adds custom flash types (e.g., :success, :error, :warning) that can be used to display flash messages to the user. layout :layout_by_resource: This line specifies a method (layout_by_resource) that will be used to determine the layout to use for the current request. devise_group :non_user, contains: %i[vista_admin staff_member]: This line specifies a group of Devise models (e.g., :vista_admin, :staff_member) that are treated as \"non-users\" for the purposes of Devise authentication. def info_for_paper_trail: This method returns a hash containing information about the current request (e.g., the IP address and user agent) that can be used by the PaperTrail gem to track changes in the application. def layout_by_resource: This method returns the name of the layout to use for the current request. If the current controller is a Devise controller, it returns 'devise', otherwise it returns 'application'. def convert_params_to_snakecase: This method converts the keys of the params hash to snakecase (e.g., 'userName' becomes 'user_name'). As the ApplicationController is a base class, it does not handle any routes or interact with any models directly. Instead, it provides common functionality that can be used by other controllers in the application. Error conditions that may be handled by the ApplicationController include CSRF attacks and other exceptions that may be raised during the handling of a request. Examples of usage for the ApplicationController might include setting flash messages or handling exceptions in controllers that inherit from it. For example: class PostsController < ApplicationController def create @post = Post.new(post_params) if @post.save flash[:success] = 'Post created successfully' redirect_to posts_path else flash[:error] = 'There was an error creating the post' render :new end end end In this example, the PostsController inherits from ApplicationController and makes use of the custom flash types (:success and :error) defined in the base class. It also utilizes the protect_from_forgery feature to protect against CSRF attacks.","title":"structure"},{"location":"controller/#folder-structure","text":"\u251c\u2500\u2500\u2500controllers \u251c\u2500\u2500\u2500admin \u2502 \u251c\u2500\u2500\u2500articles | | \u2502 \u251c\u2500\u2500\u2500categories \u2502 \u251c\u2500\u2500\u2500partner_categories \u2502 \u251c\u2500\u2500\u2500staff \u2502 \u2514\u2500\u2500\u2500vista_admins \u251c\u2500\u2500\u2500api \u2502 \u251c\u2500\u2500\u2500admin \u2502 \u2502 \u251c\u2500\u2500\u2500branches \u2502 \u2502 \u2514\u2500\u2500\u2500staff_members \u2502 \u251c\u2500\u2500\u2500partners \u2502 \u2502 \u2514\u2500\u2500\u2500v1 \u2502 \u2502 \u251c\u2500\u2500\u2500management \u2502 \u2502 \u2514\u2500\u2500\u2500staff \u2502 \u2514\u2500\u2500\u2500v1 \u2502 \u251c\u2500\u2500\u2500branches \u2502 \u251c\u2500\u2500\u2500categories \u2502 \u251c\u2500\u2500\u2500questions \u2502 \u251c\u2500\u2500\u2500sync \u2502 \u2514\u2500\u2500\u2500users \u251c\u2500\u2500\u2500concerns \u2514\u2500\u2500\u2500partners \u251c\u2500\u2500\u2500staff \u2514\u2500\u2500\u2500staff_members","title":"Folder structure"},{"location":"controller/#applicationcontroller","text":"The ApplicationController is a base class for all the controllers in a Ruby on Rails application. It provides a number of common features that are useful in most controllers, such as support for flash messages and handling of exceptions. Here is a description of each part of the ApplicationController: include Pundit: This line includes the Pundit module, which provides a set of helper methods for authorization in the controller. protect_from_forgery with: :exception: This line enables protection against cross-site request forgery (CSRF) attacks. If a request is determined to be a forgery, an exception will be raised. add_flash_types :success, :error, :warning: This line adds custom flash types (e.g., :success, :error, :warning) that can be used to display flash messages to the user. layout :layout_by_resource: This line specifies a method (layout_by_resource) that will be used to determine the layout to use for the current request. devise_group :non_user, contains: %i[vista_admin staff_member]: This line specifies a group of Devise models (e.g., :vista_admin, :staff_member) that are treated as \"non-users\" for the purposes of Devise authentication. def info_for_paper_trail: This method returns a hash containing information about the current request (e.g., the IP address and user agent) that can be used by the PaperTrail gem to track changes in the application. def layout_by_resource: This method returns the name of the layout to use for the current request. If the current controller is a Devise controller, it returns 'devise', otherwise it returns 'application'. def convert_params_to_snakecase: This method converts the keys of the params hash to snakecase (e.g., 'userName' becomes 'user_name'). As the ApplicationController is a base class, it does not handle any routes or interact with any models directly. Instead, it provides common functionality that can be used by other controllers in the application. Error conditions that may be handled by the ApplicationController include CSRF attacks and other exceptions that may be raised during the handling of a request. Examples of usage for the ApplicationController might include setting flash messages or handling exceptions in controllers that inherit from it. For example: class PostsController < ApplicationController def create @post = Post.new(post_params) if @post.save flash[:success] = 'Post created successfully' redirect_to posts_path else flash[:error] = 'There was an error creating the post' render :new end end end In this example, the PostsController inherits from ApplicationController and makes use of the custom flash types (:success and :error) defined in the base class. It also utilizes the protect_from_forgery feature to protect against CSRF attacks.","title":"ApplicationController"},{"location":"controller/admin/","text":"","title":"Admin"},{"location":"controller/api/","text":"","title":"API"},{"location":"controller/partner/","text":"","title":"Partner"},{"location":"function/","text":"Folder structure \u251c\u2500\u2500\u2500helper \u251c\u2500\u2500\u2500admin \u2514\u2500\u2500\u2500partners \u2514\u2500\u2500\u2500staff ApplicationHelper module The ApplicationHelper module is a utility module that provides a set of helper methods that can be used in views and controllers throughout a Ruby on Rails application. Here is a description of the title method you provided: Description: This method sets the title of the page by setting the value of the :title content variable. Input parameters: text: A string containing the title text to set. Output values: None. Error conditions: None. Examples of usage: Here's an example of how you might use the title method in a view: <% title 'My Page' %> This would set the :title content variable to 'My Page', which could then be used to set the title of the page in the layout file. For example: <title><%= content_for :title %></title> This would insert the value of the :title content variable into the title element of the page. subdomain function Description: This function generates a URL for a given subdomain by concatenating the subdomain with the host of the application. Input parameters: subdomain (string): The subdomain to be used in the generated URL. This parameter is optional, and if it is not provided, the function will use an empty string as the subdomain. Output values: A string containing the generated URL. Error conditions: None. Examples of usage: with_subdomain(\"test\") # returns \"test.localhost\" (assuming the host of the application is \"localhost\") with_subdomain(nil) # returns \"localhost\" with_subdomain(\"\") # returns \"localhost\" url_for function : Description: This function generates a URL based on the provided options. If the :subdomain option is present, it will be used to generate the URL using the with_subdomain function. Input parameters: options (hash): A hash of options to be used to generate the URL. This parameter is optional, and if it is not provided, the function will use the default options. Output values: A string containing the generated URL. Error conditions: None. Examples of usage: url_for(subdomain: \"test\") # returns \"test.localhost\" (assuming the host of the application is \"localhost\") url_for(host: \"example.com\") # returns \"example.com\" url_for # returns the default URL for the application","title":"structure"},{"location":"function/#folder-structure","text":"\u251c\u2500\u2500\u2500helper \u251c\u2500\u2500\u2500admin \u2514\u2500\u2500\u2500partners \u2514\u2500\u2500\u2500staff","title":"Folder structure"},{"location":"function/#applicationhelper-module","text":"The ApplicationHelper module is a utility module that provides a set of helper methods that can be used in views and controllers throughout a Ruby on Rails application. Here is a description of the title method you provided: Description: This method sets the title of the page by setting the value of the :title content variable. Input parameters: text: A string containing the title text to set. Output values: None. Error conditions: None. Examples of usage: Here's an example of how you might use the title method in a view: <% title 'My Page' %> This would set the :title content variable to 'My Page', which could then be used to set the title of the page in the layout file. For example: <title><%= content_for :title %></title> This would insert the value of the :title content variable into the title element of the page.","title":"ApplicationHelper module"},{"location":"function/#subdomain-function","text":"Description: This function generates a URL for a given subdomain by concatenating the subdomain with the host of the application. Input parameters: subdomain (string): The subdomain to be used in the generated URL. This parameter is optional, and if it is not provided, the function will use an empty string as the subdomain. Output values: A string containing the generated URL. Error conditions: None. Examples of usage: with_subdomain(\"test\") # returns \"test.localhost\" (assuming the host of the application is \"localhost\") with_subdomain(nil) # returns \"localhost\" with_subdomain(\"\") # returns \"localhost\" url_for function : Description: This function generates a URL based on the provided options. If the :subdomain option is present, it will be used to generate the URL using the with_subdomain function. Input parameters: options (hash): A hash of options to be used to generate the URL. This parameter is optional, and if it is not provided, the function will use the default options. Output values: A string containing the generated URL. Error conditions: None. Examples of usage: url_for(subdomain: \"test\") # returns \"test.localhost\" (assuming the host of the application is \"localhost\") url_for(host: \"example.com\") # returns \"example.com\" url_for # returns the default URL for the application","title":"subdomain function"},{"location":"function/admin/","text":"Admin The following are the helper functions under the admin directory category_parent_selection function Description: This function generates an array of arrays containing category names and IDs, with each category's ancestors included in the name. The resulting array is sorted by the category name. Input parameters: None. Output values: An array of arrays containing category names and IDs, with each category's ancestors included in the name, sorted by the category name. Error conditions: None. Examples of usage: category_parent_selection # returns an array of arrays containing category names and IDs, with each category's ancestors included in the name, sorted by the category name render_partner_categories function Description: This function renders a sortable list of categories using the render_sortable function and the provided reorder_admin_partner_categories_path URL. Input parameters: categories (collection): A collection of categories to be rendered. Output values: A rendered list of categories. Error conditions: If the categories parameter is nil or empty, the function returns nil. Examples of usage: render_partner_categories(Category.all) # renders a sortable list of all categories using the provided `reorder_admin_partner_categories_path` URL render_categories function Description: This function renders a sortable list of categories using the render_sortable function and the provided reorder_admin_categories_path URL. Input parameters: categories (collection): A collection of categories to be rendered. Output values: A rendered list of categories. Error conditions: If the categories parameter is nil or empty, the function returns nil. Examples of usage: render_categories(Category.all) # renders a sortable list of all categories using the provided `reorder_admin_categories_path` URL render_sortable function Description: This function renders a sortable list of items using the provided URL. Input parameters: collection (collection): A collection of items to be rendered. url (string): The URL to be used for sorting the items. Output values: A rendered list of items. Error conditions: If the collection parameter is nil or empty, the function returns nil. Examples of usage: render_sortable(Category.all, reorder_admin_categories_path) # renders a sortable list of all categories using the provided URL import_status function Description: This function returns an icon and text representing the status of a data import. Input parameters: data_import (object): An object representing a data import. The object should have a status attribute. Output values: An icon and text representing the status of the data import. Error conditions: If the data_import parameter is nil, the function returns nil. If the status attribute of the data_import object is not one of the expected values (\"new\", \"running\", \"finished\", \"failed\"), the function returns nil. Examples of usage: import_status(DataImport.first) # returns an icon and text representing the status of the first data import in the database navbar_breadcrumbs function Description: This function generates a breadcrumb navigation element with the specified options. Input parameters: None. Output values: A breadcrumb navigation element with the specified options. Error conditions: None. Examples of usage: navbar_breadcrumbs # generates a breadcrumb navigation element with the specified options category_selection function Description: This function generates an array of arrays containing category names and IDs, with each category's ancestors included in the name, for all non-root categories. The resulting array is sorted by the category name. Input parameters: None. Output values: An array of arrays containing category names and IDs, with each category's ancestors included in the name, for all non-root categories, sorted by the category name. Error conditions: None. Examples of usage: category_selection # returns an array of arrays containing category names and IDs, with each category's ancestors included in the name, for all non-root categories, sorted by the category name release_status function Description: This function returns an icon and text representing the status of a release. Input parameters: release (object): An object representing a release. The object should have a status attribute. Output values: An icon and text representing the status of the release. Error conditions: If the release parameter is nil, the functi codeon returns nil. If the status attribute of the release object is not one of the expected values (\"queued\", \"processing\", \"complete\"), the function returns nil. Examples of usage: release_status(Release.first) # returns an icon and text representing the status of the first release in the database published_status function Description: This function returns a string indicating whether a video is published or not. Input parameters: video (object): An object representing a video. The object should have a published? method. Output values: A string indicating whether the video is published or not. Error conditions: If the video parameter is nil, the function returns nil. Examples of usage: published_status(Video.first) # returns a string indicating whether the first video in the database is published or not published_at function Description: This function returns a string representing the date and time at which a video was published, or \"n/a\" if the video is not published. Input parameters: video (object): An object representing a video. The object should have a published? method and a published_at attribute. Output values: A string representing the date and time at which the video was published, or \"n/a\" if the video is not published. Error conditions: If the video parameter is nil, the function returns nil. Examples of usage: published_at(Video.first) # returns a string representing the date and time at which the first video in the database was published, or \"n/a\" if the video is not published organisation_name function Description: This function returns the name of the organisation associated with a video, or \"Vista\" if the video is not associated with an organisation. Input parameters: video (object): An object representing a video. The object should have an organisation attribute. Output values: The name of the organisation associated with the video, or \"Vista\" if the video is not associated with an organisation. Error conditions: If the video parameter is nil, the function returns nil. Examples of usage: organisation_name(Video.first) # returns the name of the organisation associated with the first video in the database, or \"Vista\" if the video is not associated with an organisation organisation_select function Description: This function generates an array of arrays containing the names and IDs of all organisations, with \"Vista\" included as the first option. Input parameters: None. Output values: An array of arrays containing the names and IDs of all organisations, with \"Vista\" included as the first option. Error conditions: None. Examples of usage: organisation_select # returns an array of arrays containing the names and IDs of all organisations, with \"Vista\" included as the first option","title":"admin"},{"location":"function/admin/#admin","text":"The following are the helper functions under the admin directory","title":"Admin"},{"location":"function/admin/#category_parent_selection-function","text":"Description: This function generates an array of arrays containing category names and IDs, with each category's ancestors included in the name. The resulting array is sorted by the category name. Input parameters: None. Output values: An array of arrays containing category names and IDs, with each category's ancestors included in the name, sorted by the category name. Error conditions: None. Examples of usage: category_parent_selection # returns an array of arrays containing category names and IDs, with each category's ancestors included in the name, sorted by the category name","title":"category_parent_selection function"},{"location":"function/admin/#render_partner_categories-function","text":"Description: This function renders a sortable list of categories using the render_sortable function and the provided reorder_admin_partner_categories_path URL. Input parameters: categories (collection): A collection of categories to be rendered. Output values: A rendered list of categories. Error conditions: If the categories parameter is nil or empty, the function returns nil. Examples of usage: render_partner_categories(Category.all) # renders a sortable list of all categories using the provided `reorder_admin_partner_categories_path` URL","title":"render_partner_categories function"},{"location":"function/admin/#render_categories-function","text":"Description: This function renders a sortable list of categories using the render_sortable function and the provided reorder_admin_categories_path URL. Input parameters: categories (collection): A collection of categories to be rendered. Output values: A rendered list of categories. Error conditions: If the categories parameter is nil or empty, the function returns nil. Examples of usage: render_categories(Category.all) # renders a sortable list of all categories using the provided `reorder_admin_categories_path` URL","title":"render_categories function"},{"location":"function/admin/#render_sortable-function","text":"Description: This function renders a sortable list of items using the provided URL. Input parameters: collection (collection): A collection of items to be rendered. url (string): The URL to be used for sorting the items. Output values: A rendered list of items. Error conditions: If the collection parameter is nil or empty, the function returns nil. Examples of usage: render_sortable(Category.all, reorder_admin_categories_path) # renders a sortable list of all categories using the provided URL","title":"render_sortable function"},{"location":"function/admin/#import_status-function","text":"Description: This function returns an icon and text representing the status of a data import. Input parameters: data_import (object): An object representing a data import. The object should have a status attribute. Output values: An icon and text representing the status of the data import. Error conditions: If the data_import parameter is nil, the function returns nil. If the status attribute of the data_import object is not one of the expected values (\"new\", \"running\", \"finished\", \"failed\"), the function returns nil. Examples of usage: import_status(DataImport.first) # returns an icon and text representing the status of the first data import in the database","title":"import_status function"},{"location":"function/admin/#navbar_breadcrumbs-function","text":"Description: This function generates a breadcrumb navigation element with the specified options. Input parameters: None. Output values: A breadcrumb navigation element with the specified options. Error conditions: None. Examples of usage: navbar_breadcrumbs # generates a breadcrumb navigation element with the specified options","title":"navbar_breadcrumbs function"},{"location":"function/admin/#category_selection-function","text":"Description: This function generates an array of arrays containing category names and IDs, with each category's ancestors included in the name, for all non-root categories. The resulting array is sorted by the category name. Input parameters: None. Output values: An array of arrays containing category names and IDs, with each category's ancestors included in the name, for all non-root categories, sorted by the category name. Error conditions: None. Examples of usage: category_selection # returns an array of arrays containing category names and IDs, with each category's ancestors included in the name, for all non-root categories, sorted by the category name","title":"category_selection function"},{"location":"function/admin/#release_status-function","text":"Description: This function returns an icon and text representing the status of a release. Input parameters: release (object): An object representing a release. The object should have a status attribute. Output values: An icon and text representing the status of the release. Error conditions: If the release parameter is nil, the functi codeon returns nil. If the status attribute of the release object is not one of the expected values (\"queued\", \"processing\", \"complete\"), the function returns nil. Examples of usage: release_status(Release.first) # returns an icon and text representing the status of the first release in the database","title":"release_status function"},{"location":"function/admin/#published_status-function","text":"Description: This function returns a string indicating whether a video is published or not. Input parameters: video (object): An object representing a video. The object should have a published? method. Output values: A string indicating whether the video is published or not. Error conditions: If the video parameter is nil, the function returns nil. Examples of usage: published_status(Video.first) # returns a string indicating whether the first video in the database is published or not","title":"published_status function"},{"location":"function/admin/#published_at-function","text":"Description: This function returns a string representing the date and time at which a video was published, or \"n/a\" if the video is not published. Input parameters: video (object): An object representing a video. The object should have a published? method and a published_at attribute. Output values: A string representing the date and time at which the video was published, or \"n/a\" if the video is not published. Error conditions: If the video parameter is nil, the function returns nil. Examples of usage: published_at(Video.first) # returns a string representing the date and time at which the first video in the database was published, or \"n/a\" if the video is not published","title":"published_at function"},{"location":"function/admin/#organisation_name-function","text":"Description: This function returns the name of the organisation associated with a video, or \"Vista\" if the video is not associated with an organisation. Input parameters: video (object): An object representing a video. The object should have an organisation attribute. Output values: The name of the organisation associated with the video, or \"Vista\" if the video is not associated with an organisation. Error conditions: If the video parameter is nil, the function returns nil. Examples of usage: organisation_name(Video.first) # returns the name of the organisation associated with the first video in the database, or \"Vista\" if the video is not associated with an organisation","title":"organisation_name function"},{"location":"function/admin/#organisation_select-function","text":"Description: This function generates an array of arrays containing the names and IDs of all organisations, with \"Vista\" included as the first option. Input parameters: None. Output values: An array of arrays containing the names and IDs of all organisations, with \"Vista\" included as the first option. Error conditions: None. Examples of usage: organisation_select # returns an array of arrays containing the names and IDs of all organisations, with \"Vista\" included as the first option","title":"organisation_select function"},{"location":"function/partner/","text":"Partners The following are the helper functions under the partners directory business_units_for_select function : Description: This function returns the business units of the current organisation if the current staff member is an admin, or the business units assigned to the current staff member if they are not an admin. Input parameters: None. Output values: The business units of the current organisation if the current staff member is an admin, or the business units assigned to the current staff member if they are not an admin. Error conditions: If the current_organisation or current_staff_member objects are nil, the function returns nil. Examples of usage: business_units_for_select # returns the business units of the current organisation if the current staff member is an admin, or the business units assigned to the current staff member if they are not an admin preference_groups_json function : Description: This function generates a JSON array of preference groups, including their IDs, titles, and the titles of their questions. Input parameters: preference_groups (collection): A collection of preference group objects. Output values: A JSON array of preference groups, including their IDs, titles, and the titles of their questions. Error conditions: If the preference_groups parameter is `nil","title":"partners"},{"location":"function/partner/#partners","text":"The following are the helper functions under the partners directory","title":"Partners"},{"location":"function/partner/#business_units_for_select-function","text":"Description: This function returns the business units of the current organisation if the current staff member is an admin, or the business units assigned to the current staff member if they are not an admin. Input parameters: None. Output values: The business units of the current organisation if the current staff member is an admin, or the business units assigned to the current staff member if they are not an admin. Error conditions: If the current_organisation or current_staff_member objects are nil, the function returns nil. Examples of usage: business_units_for_select # returns the business units of the current organisation if the current staff member is an admin, or the business units assigned to the current staff member if they are not an admin","title":"business_units_for_select function:"},{"location":"function/partner/#preference_groups_json-function","text":"Description: This function generates a JSON array of preference groups, including their IDs, titles, and the titles of their questions. Input parameters: preference_groups (collection): A collection of preference group objects. Output values: A JSON array of preference groups, including their IDs, titles, and the titles of their questions. Error conditions: If the preference_groups parameter is `nil","title":"preference_groups_json function:"},{"location":"models/","text":"Models Folder structure \u251c\u2500\u2500\u2500models \u251c\u2500\u2500\u2500concerns \u251c\u2500\u2500\u2500personality \u2514\u2500\u2500\u2500versions Address The Address model represents an address in the system. It has the following attributes: id (integer): a unique ID for the address label (string): a label or nickname for the address line1 (string): the first line of the address line2 (string): the second line of the address town (string): the town or city where the address is located county (string): the county or region where the address is located postcode (string): the postal code for the address country (string): the country where the address is located phone (string): a phone number associated with the address latitude (decimal): the latitude of the address longitude (decimal): the longitude of the address addressable_type (string): the type of model that the address belongs to** (e.g. \"User\" or \"Company\") addressable_id (integer): the ID of the model that the address belongs to created_at (datetime): the date and time that the address was created updated_at (datetime): the date and time that the address was last updated city_id (integer): the ID of the city where the address is located The Address model has the following relationships: belongs_to :addressable, polymorphic: true: this indicates that the address belongs to a parent model, and the addressable_type and addressable_id attributes are used to specify which model the address belongs to. The polymorphic option indicates that the parent model can be any type of model, and the inverse_of: :address option specifies the name of the has_one or has_many association on the parent model. belongs_to :city: this indicates that the address belongs to a city. The city_id attribute is used to specify which city the address belongs to. The Address model has the following custom methods: country_name: this method returns the name of the country for the address. It uses the ISO3166 gem to look up the name of the country based on the country attribute. country_code: this method returns the country code for the address. It simply returns the value of the country attribute. Here are some examples of how the Address model might be used: # Find all addresses for a user user = User.find(123) addresses = user.addresses # Find the nearest address to a given location latitude = 37.774929 longitude = -122.419416 radius = 5 # miles addresses = Address.within(radius, origin: [latitude, longitude]) # Find the address for a specific user user = User.find(123) address = user.address # Set the address for a user user = User.find(123) Admin The following are the Attributes of Admin: id : bigint, primary key for the model email : string, the email address of the admin first_name : string, the first name of the admin last_name : string, the last name of the admin mobile_number : string, the mobile phone number of the admin encrypted_password : string, a hashed version of the admin's password reset_password_token : string, a token used for resetting the admin's password reset_password_sent_at : datetime, the time at which the reset password token was sent remember_created_at : datetime, the time at which the admin selected the \"remember me\" option during login sign_in_count : integer, the number of times the admin has signed in current_sign_in_at : datetime, the time at which the admin signed in during the current session last_sign_in_at : datetime, the time at which the admin signed in during the previous session current_sign_in_ip : inet, the IP address of the admin during the current session last_sign_in_ip : inet, the IP address of the admin during the previous session authentication_token : string, a token used for authenticating the admin created_at : datetime, the time at which the admin's record was created updated_at : datetime, the time at which the admin's record was last updated organisation_id : bigint, the ID of the organization to which the admin belongs type : string, the type of staff member (in this case, \"Admin\") employee_id : string, the employee ID of the admin confirmation_token : string, a token used for confirming the admin's email address confirmed_at : datetime, the time at which the admin's email address was confirmed confirmation_sent_at : datetime, the time at which the confirmation token was sent suspended_at : datetime, the time at which the admin's access was suspended archived_at : datetime, the time at which the admin's record was archived encrypted_pin : string, a hashed version of the admin's PIN (personal identification number) unconfirmed_email : string, the unconfirmed email address of the admin (if the admin has requested a change to their email address) Inherits from StaffMember model Custom methods: None Examples of usage: An instance of the Admin model could represent a staff member with administrative privileges within an organization. The email, password, and authentication token attributes could be used for authenticating the admin when logging in to the system. The sign_in_count, current_sign_in_at, and last_sign_in_at attributes could be used for tracking the admin's login history. Answer Attributes: id (integer): The primary key for the model. question_id (integer): The ID of the question that the answer belongs to. title (text): The title of the answer. description (text): A description of the answer. created_at (datetime): The timestamp for when the answer was created. updated_at (datetime): The timestamp for when the answer was last updated. position (integer): The position of the answer within its parent question. Relationships: question (belongs_to): The question that the answer belongs to. photo (has_one): The photo associated with the answer. Custom methods: siblings : Returns the other answers within the same question as the current answer. reject_photo? : Determines whether a photo should be rejected when creating or updating an answer. set_position : Sets the position of the answer within its parent question. Examples of usage: # Create a new answer with a title and description answer = Answer.new(title: 'Yes', description: 'The answer is yes') # Set the question that the answer belongs to answer.question = Question.first # Save the answer answer.save # Update the title of the answer answer.title = 'Yes, definitely' answer.save # Delete the answer answer.destroy ApplicationRecord Attributes: None. ApplicationRecord is an abstract base class and does not have any attributes of its own. Relationships: None. ApplicationRecord is an abstract base class and does not have any relationships of its own. Custom methods: updated_since(datetime): Returns all records that have been updated since the specified datetime. pluck_to_hash(*keys): Returns an array of hashes, where each hash represents a record in the database with keys corresponding to the specified attributes. Examples of usage: # Find all records in the database that have been updated since yesterday ApplicationRecord.updated_since(1.day.ago) # Retrieve the IDs and titles of all records in the database ApplicationRecord.pluck_to_hash(:id, :title) Note: ApplicationRecord is an abstract base class and cannot be instantiated directly. Instead, you will need to use a concrete subclass of ApplicationRecord (such as Answer, Question, etc.) to create and manipulate records in the database. ArticleContentCategory Attributes: id (integer): The primary key for the model. article_id (integer): The ID of the article that the content category belongs to. content_category_id (integer): The ID of the content category. created_at (datetime): The timestamp for when the article content category was created. updated_at (datetime): The timestamp for when the article content category was last updated. Relationships: article (belongs_to): The article that the content category belongs to. content_category (belongs_to): The content category. Custom methods: None. Examples of usage: # Create a new article content category article_content_category = ArticleContentCategory.new # Set the article and content category that the article content category belongs to article_content_category.article = Article.first article_content_category.content_category = ContentCategory.first # Save the article content category article_content_category.save # Delete the article content category article_content_category.destroy Article Attributes: id (integer): The primary key for the model. title (string): The title of the article. content (text): The content of the article. publish_at (datetime): The timestamp for when the article should be published. created_at (datetime): The timestamp for when the article was created. updated_at (datetime): The timestamp for when the article was last updated. notification_job_id (integer): The ID of the job used to send notifications when the article is published. Relationships: header_image (has_one): The header image for the article. photos (has_many): The photos associated with the article. article_content_categories (has_many): The article content categories associated with the article. content_categories (has_many): The content categories associated with the article. Custom methods: header_image=(header_image) : Sets the header image for the article. publish_at=(publish_at) : Sets the publish timestamp for the article. published? : Returns true if the article has been published, false otherwise. status : Returns the current status of the article. self.start_draft : Creates a new draft article. Examples of usage: # Create a new article article = Article.new # Set the title and content of the article article.title = 'My article' article.content = 'This is the content of my article' # Set the publish timestamp for the article article.publish_at = 1.day.from_now # Save the article article.save # Check if the article has been published article.published? # Get the status of the article article.status # Delete the article article.destroy AuthenticationToken The AuthenticationToken model represents a token that is used to authenticate a user. It belongs to a polymorphic user, which means that it can belong to any model that includes the User module. Attributes: id : a unique identifier for the token (integer, primary key) context : the context in which the token is used (string) body : the actual token (string) user_type : the type of the user that the token belongs to (string) user_id : the ID of the user that the token belongs to (integer) last_used_at : the last time the token was used (datetime) ip_address : the IP address from which the token was last used (inet) user_agent : the user agent string from the device that used the token last (string) created_at : the time the token was created (datetime) updated_at : the time the token was last updated (datetime) Relationships: user : the user that the token belongs to (polymorphic association) Custom methods: decode : decodes a token from the headers find_for_context : finds a token for a given context and token body create_and_return_staff_token : creates a new staff token and returns it create_and_return_manager_token : creates a new manager token and returns it create_and_return_token : creates a new token for a given context and returns it create_and_return_analytics_token : creates and returns an analytics token Examples of usage: To create a new staff token for a user: token = AuthenticationToken.create_and_return_staff_token(current_user, request) To find a token for a given context and token body: token = AuthenticationToken.find_for BranchCategorisation The BranchCategorisation model represents the many-to-many relationship between branches and partner categories. This allows a branch to be associated with one or more partner categories, and a partner category to be associated with one or more branches. Attributes: id : A unique identifier for the branch categorisation record, stored as an integer and generated automatically by the database. branch_id : The ID of the branch that is associated with a partner category, stored as an integer. partner_category_id : The ID of the partner category that is associated with a branch, stored as an integer. created_at : A timestamp indicating when the branch categorisation record was created, stored as a datetime. updated_at : A timestamp indicating when the branch categorisation record was last updated, stored as a datetime. Relationships: belongs_to : A branch categorisation belongs to a single branch and a single partner category. branch : This relationship specifies the branch that is associated with a partner category. partner_category : This relationship specifies the partner category that is associated with a branch. Custom methods: There are no custom methods defined for the BranchCategorisation model. Examples of usage: Creating a new branch categorisation: branch = Branch.first partner_category = PartnerCategory.first branch_categorisation = BranchCategorisation.new(branch: branch, partner_category: partner_category) branch_categorisation.save Retrieving all branch categorisations for a particular branch: branch = Branch.first branch_categorisations = branch.branch_categorisations Retrieving all branches that belong to a particular partner category: partner_category = PartnerCategory.first branches = partner_category.branches Removing a branch categorisation: branch_categorisation = BranchCategorisation.first branch_categorisation.destroy BranchManager The BranchManager model is a subclass of the StaffMember model and represents a staff member who is a branch manager at an organisation. attributes: id : a bigint that serves as the primary key for the model email : a string that stores the email address of the staff member first_name : a string that stores the first name of the staff member last_name : a string that stores the last name of the staff member mobile_number : a string that stores the mobile phone number of the staff member encrypted_password : a string that stores the encrypted password of the staff member reset_password_token : a string that stores a token used to reset the staff member's password reset_password_sent_at : a datetime that stores the time at which the reset password token was sent to the staff member remember_created_at : a datetime that stores the time at which the staff member requested to be remembered on the device they are using sign_in_count : an integer that stores the number of times the staff member has signed in current_sign_in_at : a datetime that stores the time at which the staff member last signed in last_sign_in_at : a datetime that stores the time at which the staff member signed in before the last time they signed in current_sign_in_ip : an inet data type that stores the IP address the staff member is currently signed in from last_sign_in_ip : an inet data type that stores the IP address the staff member last signed in from authentication_token : a string that stores a unique token used for authentication purposes created_at : a datetime that stores the time at which the staff Relationships: BranchManager has a one-to-many relationship with Branch through the branches association. Custom methods: assigned_branches: returns a collection of branches that the branch manager is assigned to. Examples of usage: # Find a branch manager by their email and assign them to a branch manager = BranchManager.find_by(email: 'branch_manager@example.com') branch = Branch.find(1) manager.branches << branch # Find all the branches that a branch manager is assigned to manager = BranchManager.find(1) manager.assigned_branches Branch Attributes: id : integer, primary key business_unit_id : integer name : string created_at : datetime updated_at : datetime email : string telephone : string archived_at : datetime image : string branch_info : string booking_url : string vista_partner : boolean, default: false ratings_count : integer, default: 0 Relationships: business_unit : belongs to a BusinessUnit organisation : has one Organisation through the BusinessUnit photo : has one Photo as owner address : has one Address as addressable staff_assignments : has many StaffAssignments as target staff_members : has many StaffMembers through StaffAssignments shares : has many Shares users : has many Users through Shares with the condition that the Share is authorised branch_categorisations : has many BranchCategorisations categories : has many PartnerCategories through BranchCategorisations interactions : has many Interactions roles : has many Roles through the BusinessUnit check_ins : has many CheckIns member_requests : has many MemberRequests member_request_messages : has many MemberRequestMessages as messageable Custom methods: category_titles : returns an array of the titles of the categories associated with the branch destroy_staff : destroys the staff members associated with the branch BusinessUnit Attributes: id : integer, primary key name : string organisation_id : integer, foreign key to the organisations table created_at : datetime updated_at : datetime archived_at : datetime Relationships: belongs_to :organisation has_many :branches has_many :roles has_many :member_request_types Custom methods: None Examples of usage: Fetch all business units belonging to a particular organisation: organisation = Organisation.find(1) business_units = organisation.business_units Fetch all branches belonging to a particular business unit: business_unit = BusinessUnit.find(1) branches = business_unit.branches Fetch all roles belonging to a particular business unit: business_unit = BusinessUnit.find(1) roles = business_unit.roles Fetch all member request types belonging to a particular business unit: business_unit = BusinessUnit.find(1) member_request_types = business_unit.member_request_types CategoryUpdate Attributes: id : integer category_id : integer question_ids : array of integers created_at : datetime updated_at : datetime Relationships: belongs_to :category Custom methods : title : returns the title of the associated category photo : returns the photo of the associated category questions : returns an array of Question objects that have an id in the question_ids attribute Examples of usage: Find the category update with id 1 update = CategoryUpdate.find(1) Access the title of the associated category update.title Access the photo of the associated category update.photo Access the questions associated with this update update.questions Category It has the following attributes: id : a unique identifier for the update, stored as a bigint category_id : a foreign key referencing the category that this update is for question_ids : an array of integers representing the question IDs that are associated with this update created_at : a timestamp for when the update was created updated_at : a timestamp for when the update was last updated It has the following relationships: belongs_to :category : indicates that each category update belongs to a single category It has the following custom methods: title : returns the title of the category that this update is for. If the category's title is \"general\" and it has a parent, the parent's title is returned instead. photo : returns the photo of the category that this update is for. questions: returns a collection of Question objects that are associated with this update. Here is an example of how the CategoryUpdate model could be used: Find a category update by its ID update = CategoryUpdate.find(1) Access the title of the update's category puts update.title Access the questions associated with the update questions = update.questions CheckIn The CheckIn model represents a check-in by a user to a branch in the application. It has the following attributes: id : a unique identifier for the check-in, stored as a bigint user_id : a foreign key referencing the user who checked in branch_id : a foreign key referencing the branch that the user checked in to arrival_date : a date representing the date on which the user checked in arrival_time_start : a time representing the start time of the user's check-in arrival_time_end : a time representing the end time of the user's check-in created_at : a timestamp for when the check-in was created updated_at : a timestamp for when the check-in was last updated It has the following relationships: belongs_to :user, touch: true : indicates that each check-in belongs to a single user, and the updated_at timestamp of the user will be updated whenever this check-in is saved. belongs_to :branch: indicates that each check-in belongs to a single branch It has the following custom methods: earliest : a scope that orders check-ins by their arrival_date in ascending order. future: a scope that filters check-ins to only include those with an arrival_date in the future. for_branch: a scope that filters check-ins to only include those for a particular branch. Here is an example of how the CheckIn model could be used: Find a user by their ID user = User.find(1) Find a branch by its ID branch = Branch.find(1) Create a new check-in for the user at the branch check_in = CheckIn.new(user: user, branch: branch, arrival_date: Date.today, arrival_time_start: Time.now) Save the check-in check_in.save Find all future check-ins for a particular branch future_check_ins = CheckIn.for_branch(branch).future City The City model represents a city in the application. It has the following attributes: id : a unique identifier for the city, stored as a bigint name : the name of the city created_at : a timestamp for when the city was created updated_at : a timestamp for when the city was last updated status : a string representing the status of the city, with possible values of \"enabled\", \"disabled\", and \"coming_soon\" It has the following relationships: HasPhoto : indicates that the City model includes the HasPhoto module, which provides it with the ability to have a photo associated with it. It has the following custom methods: to_s : returns the name of the city as a string. It also has the following scopes: default_scope : orders cities by their name in ascending order. not_disabled : filters cities to only include those with a status of \"enabled\" or \"coming_soon\". Here is an example of how the City model could be used: Find a city by its ID city = City.find(1) Access the name of the city puts city.name Update the status of the city city.status = \"disabled\" city.save Find all cities that are not disabled cities = City.not_disabled ContentCategory The ContentCategory model represents a category for organizing content (e.g. articles, videos) in the application. It has the following attributes: id : a unique identifier for the content category, stored as a bigint name : the name of the content category created_at : a timestamp for when the content category was created updated_at : a timestamp for when the content category was last updated It has the following relationships: has_many :article_content_categories, dependent: :destroy: indicates that each content category can have many associations with articles through the article_content_categories join table, and these associations will be destroyed if the content category is deleted. has_many :articles, through: :article_content_categories : indicates that a content category can have many articles associated with it through the article_content_categories join table. has_many :video_content_categories, dependent: :destroy : indicates that each content category can have many associations with videos through the video_content_categories join table, and these associations will be destroyed if the content category is deleted. has_many :videos, through: :video_content_categories : indicates that a content category can have many videos associated with it through the video_content_categories join table. Here is an example of how the ContentCategory model could be used: Find a content category by its ID category = ContentCategory.find(1) Access the name of the category puts category.name Find all articles in the category articles = category.articles Find all videos in the category videos = category.videos Create a new article and associate it with the category article = Article.new(title: \"New Article\") article.content_categories << category article.save DataImport The DataImport model represents an import of data from a file (e.g. a spreadsheet) in the application. It has the following attributes: id : a unique identifier for the data import, stored as a bigint file : a string representing the file that was imported, stored as a file on the filesystem status : a string representing the status of the data import, with possible values of \"new\", \"running\", \"finished\", and \"failed\" log : a text field that stores log messages for the data import finished_at : a timestamp for when the data import finished created_at : a timestamp for when the data import was created updated_at : a timestamp for when the data import was last updated options : a JSONB field that stores options for the data import, including whether to import categories, questions, locking conditions, and visibility conditions The DataImport model has the following relationships: mount_uploader :file, FileUploader : indicates that the file attribute is a file that is managed by the FileUploader uploader. It has the following custom methods: filename : returns the filename of the imported file as a string. import_all : performs the data import, updating the status of the data import to \"running\" and setting it to \"finished\" or \"failed\" upon completion. This method also broadcasts the status of the data import to a channel on the Action Cable server. import_categories : imports categories from the data import file. import_questions : imports questions from the data import file. update_visibility_conditions : updates visibility conditions for questions in the data import file. update_locking_conditions : updates locking conditions for questions in the data import file. categories_spreadsheet : returns a Spreadsheet object for the categories sheet in the data import file. questions_spreadsheet : returns a Spreadsheet object for the questions sheet in the data import file. visibility_conditions_spreadsheet : returns a Spreadsheet object for the visibility conditions sheet in the data import file. locking_conditions_spreadsheet : returns a Spreadsheet object for the locking conditions sheet in the data import file. Here is an example of how the DataImport model could be used: Create a new data import with a file and options data_import = DataImport.new(file: params[:file], options: { categories: true, questions: true }) Save the data import and perform the import if data_import.save data_import.import_all end Find all data imports ordered by the most recently created data_imports = DataImport.all Device The Device model represents a device that a user has used to sign in to the application. It has the following attributes: id : a unique identifier for the device, stored as a bigint user_id : a foreign key for the user associated with the device platform : a string representing the platform of the device (e.g. \"ios\" or \"android\") token : a string representing a unique token for the device created_at : a timestamp for when the device was created updated_at : a timestamp for when the device was last updated It has the following relationships: belongs_to :user : indicates that each device belongs to a single user. It has the following custom methods: ios? : returns true if the platform of the device is \"ios\", false otherwise. android?: returns true if the platform of the device is \"android\", false otherwise. Here is an example of how the Device model could be used: Find a device by its token device = Device.find_by(token: params[:token]) Check if the device is an iOS device if device.ios? # Do something end Create a new device for a user device = Device.new(user: current_user, platform: params[:platform], token: params[:token]) Save the device device.save Feed The Feed model is a serializable model that represents a feed of content for a user. It has the following attributes: articles : an array of articles to be included in the feed interactions : an array of interactions to be included in the feed category_updates : an array of category updates to be included in the feed videos : an array of videos to be included in the feed It does not have any relationships or custom methods. Here is an example of how the Feed model could be used: Initialize a new feed with arrays of articles, interactions, category updates, and videos feed = Feed.new(articles: articles, interactions: interactions, category_updates: category_updates, videos: videos) Render the feed as JSON using a serializer render json: feed Ignore The Ignore model represents a relationship between a user and a category where the user has indicated that they do not want to receive notifications for updates to the category. It has the following attributes: id : a unique identifier for the ignore relationship, stored as a bigint user_id : a foreign key for the user associated with the ignore relationship category_id : a foreign key for the category associated with the ignore relationship created_at : a timestamp for when the ignore relationship was created updated_at : a timestamp for when the ignore relationship was last updated It has the following relationships: belongs_to :user : indicates that each ignore relationship belongs to a single user. belongs_to :category : indicates that each ignore relationship belongs to a single category. It does not have any custom methods. Here is an example of how the Ignore model could be used: Create a new ignore relationship between a user and a category ignore = Ignore.new(user: current_user, category: category) Save the ignore relationship ignore.save Find all the categories that a user is ignoring ignored_categories = Ignore.where(user: current_user).includes(:category) Interaction The Interaction model represents a user interaction with a staff member, branch, or category. These interactions can be of different types, such as a recommendation or booking a taxi. Attributes: id : a unique identifier for the interaction user_id : the ID of the user who is interacting staff_member_id : the ID of the staff member involved in the interaction branch_id : the ID of the branch involved in the interaction category_id : the ID of the category involved in the interaction description : a description of the interaction created_at : the date and time that the interaction was created updated_at : the date and time that the interaction was last updated type : the type of interaction Relationships: belongs_to :user : the interaction belongs to a user belongs_to :staff_member : the interaction may involve a staff member belongs_to :branch : the interaction may involve a branch belongs_to :category : the interaction may involve a category Custom methods: mood? : returns a boolean indicating whether the interaction is a mood type partner_type? : returns a boolean indicating whether the interaction is a partner type (i.e. a type that involves a staff member or branch) Examples of usage: Retrieving a list of interactions for a particular user: Interaction.where(user_id: user.id) Retrieving a list of mood interactions for today: Interaction.where(type: 'mood').for_today MemberRequestMessage The MemberRequestMessage model represents a message sent within a MemberRequest conversation between a staff member and a user. Attributes: id (integer) : The unique identifier for the message. body (text) : The content of the message. status (string) : The current status of the message, which can be pending, sent, or read. member_request_id (integer) : The identifier for the MemberRequest conversation to which the message belongs. messageable_id (integer) : The identifier for the user or staff member who sent the message. messageable_type (string) : The type of the sender, either User or StaffMember. created_at (datetime) : The timestamp when the message was created. updated_at (datetime) : The timestamp when the message was last updated. Relationships: belongs_to member_request : The MemberRequest conversation to which the message belongs. belongs_to messageable (polymorphic) : The user or staff member who sent the message. Custom methods: mark_as_read : Changes the status attribute to read. mark_as_unread : Changes the status attribute to pending. mark_as_sent : Changes the status attribute to sent. read? : Returns a boolean indicating whether the status attribute is read. Examples of usage: Create a new message: mr = MemberRequest.first message = MemberRequestMessage.new(body: 'Hello, how are you doing?', member_request: mr, messageable: staff_member) message.save Mark a message as read: message = MemberRequestMessage.first message.mark_as_read! Check if a message has been read: message = MemberRequestMessage.first message.read? Get all unread messages sent by staff members: MemberRequestMessage.from_staff_member.unread MemberRequestTypeAssignment The MemberRequestTypeAssignment model represents a many-to-many relationship between Role and MemberRequestType models. It allows the assignment of one or more roles to a member request type, indicating which staff members are responsible for handling member requests of that type. Attributes: id (integer) : the primary key for the model. role_id (integer) : the foreign key for the Role model, indicating the role being assigned to the member request type. member_request_type_id (integer) : the foreign key for the MemberRequestType model, indicating the member request type being assigned to the role. created_at (datetime) : the timestamp for when the record was created. updated_at (datetime) : the timestamp for when the record was last updated. Relationships: belongs_to : the MemberRequestTypeAssignment model belongs to both the Role and MemberRequestType models. Custom methods: None. Examples of usage: Assign the 'customer_service' role to the 'booking' member request type member_request_type = MemberRequestType.find_by(name: 'booking') role = Role.find_by(name: 'customer_service') assignment = MemberRequestTypeAssignment.create(member_request_type: member_request_type, role: role) Get the member request types assigned to the 'customer_service' role role = Role.find_by(name: 'customer_service') member_request_types = role.member_request_types MemberRequestType The MemberRequestType model represents a type of request that can be made by a member (user) to staff members in an organisation. Attributes: id : a unique identifier for the request type (integer, primary key) name : the name of the request type (string) business_unit_id : the unique identifier of the business unit to which the request type belongs (integer) created_at : the date and time at which the request type was created (datetime) updated_at : the date and time at which the request type was last updated (datetime) archived_at : the date and time at which the request type was archived (datetime) Relationships: business_unit : a belongs-to relationship with the BusinessUnit model. A request type belongs to a single business unit. organisation : a has-one-through relationship with the Organisation model. A request type has a single organisation through its business unit. member_request_type_assignments : a has-many relationship with the MemberRequestTypeAssignment model. A request type has many type assignments. roles : a has-many-through relationship with the Role model. A request type has many roles through its type assignments. staff_members : a has-many-through relationship with the StaffMember model. A request type has many staff members through its roles. Custom methods: acts_as_paranoid : this is a method provided by the ActsAsParanoid gem which allows the request type to be \"soft deleted\" by setting the archived_at attribute to the current date and time. This allows the request type to be restored if necessary. Examples of usage: Creating a new request type: request_type = MemberRequestType.new(name: 'Booking assistance') request_type.business_unit = BusinessUnit.first request_type.save MemberRequest Description: This model represents a request made by a member (user) to the staff of a branch. It has a type (e.g. booking, service request, etc.) and a status (open, pending, closed). The request can be composed of multiple messages exchanged between the member and the staff. Attributes: id : a unique identifier for the request (integer, primary key) user_id : the id of the member who made the request (integer, foreign key to the users table) branch_id : the id of the branch where the request was made (integer, foreign key to the branches table) member_request_type_id: the id of the type of request (integer, foreign key to the member_request_types table) status : the current status of the request (string, can be \"open\", \"pending\", or \"closed\") created_at : the timestamp for when the request was created (datetime) updated_at : the timestamp for when the request was last updated (datetime) last_message_sent_at : the timestamp for when the last message was sent for this request (datetime) Relationships: belongs_to :user belongs_to :branch belongs_to :member_request_type has_many :member_request_messages, dependent: :destroy Custom methods: mark_as_unread : marks the last message from the member as unread. Examples of usage: Create a new member request: request = MemberRequest.new(user_id: 1, branch_id: 2, member_request_type_id: 3, status: \"open\") request.member_request_messages.build(body: \"Hi, I would like to book a table for two on Friday at 7pm.\", messageable_type: \"User\") request.save Find all open member requests for a specific branch: requests = MemberRequest.for_branch(2).in_status(\"open\") Find all member requests for a specific member: requests = MemberRequest.for_member(1) Find all member requests with a specific message: requests = MemberRequest.with_message(5) Notification The Notification model represents a notification that can be sent to a user. It can be associated with a specific object, such as a Branch or MemberRequestMessage, through a polymorphic association. Attributes: user_id : The ID of the user who will receive the notification. type : The type of notification, represented as a string. response : A JSONb field that can store a response from the user to the notification. object_type : The type of object that the notification is associated with, stored as a string. object_id : The ID of the object that the notification is associated with. created_at : The timestamp when the notification was created. updated_at : The timestamp when the notification was last updated. read_at : The timestamp when the notification was marked as read by the user. responded_at : The timestamp when the user responded to the notification. Relationships: belongs_to :user : The user who will receive the notification. belongs_to :object, polymorphic: true: The object that the notification is associated with. Custom methods: human_type : Returns the type of the notification in a human-readable format (e.g. \"new_message\" for Notification::NewMessage). mark_as_read : Marks the notification as read by updating the read_at attribute. self.mark_all_read: Marks all notifications as read for the current user by updating the read_at attribute. name : Returns the name of the object that the notification is associated with, or the name of the branch if the object is a MemberRequestMessage. Examples of usage: Create a new notification notification = Notification::NewMessage.create!(user: user, object: member_request_message) Mark a notification as read notification.mark_as_read Mark all notifications as read for a user Notification.where(user: user).mark_all_read Find unread notifications for a user unread_notifications = Notification.where(user: user).unread Organisation The Organisation model represents a company or organization in the system. It has the following attributes: id : a unique identifier for the organisation, stored as a big integer and generated automatically by the database. name : a string containing the name of the organization. This attribute is required. about : a text field containing information about the organization. archived_at : a datetime field containing the date and time at which the organization was archived. If the organization has not been archived, this field is nil. The Organisation model has the following relationships: address : a one-to-one relationship with the Address model, representing the address of the organization. photo : a one-to-one relationship with the Photo model, representing a photo of the organization. staff_members : a one-to-many relationship with the StaffMember model, representing the staff members of the organization. branch_managers : a one-to-many relationship with the BranchManager model, representing the branch managers of the organization. admins : a one-to-many relationship with the Admin model, representing the administrators of the organization. business_units : a one-to-many relationship with the BusinessUnit model, representing the business units within the organization. branches : a many-to-many relationship with the Branch model, through the BusinessUnit model, representing the branches that belong to the organization. roles : a many-to-many relationship with the Role model, through the BusinessUnit model, representing the roles that exist within the organization. videos : a one-to-many relationship with the Video model, representing the videos associated with the organization. The Organisation model has the following custom methods: reject_photo?(attributes) : a private method used to determine whether a photo should be rejected when creating or updating an organization. It returns true if the image attribute of the attributes parameter is blank, and false otherwise. An example of usage for the Organisation model could be: Create a new organization org = Organisation.new(name: \"My Organization\") PartnerCategory The PartnerCategory model represents categories for partners in the system. A partner can belong to multiple categories and each category can have multiple partners. Attributes: id : a unique identifier for the partner category (integer, primary key) title : the name of the partner category (string) position : the position of the partner category in a list (integer) created_at : the timestamp when the partner category was created (datetime) updated_at : the timestamp when the partner category was last updated (datetime) Relationships: branch_categorisations : a has-many relationship with the BranchCategorisation model, representing the categories a branch belongs to (a branch can belong to multiple categories and a category can have multiple branches) branches : a has-many-through relationship with the Branch model, representing the branches that belong to the partner category Custom methods: to_s : returns the title of the partner category as a string Examples of usage: Creating a new partner category: category = PartnerCategory.new(title: 'Technology') category.save Adding a branch to a partner category: category = PartnerCategory.find(1) branch = Branch.find(2) category.branches << branch Displaying the title of a partner category: category = PartnerCategory.find(1) puts category.to_s # outputs the title of the partner category Personality The Personality model represents the personality of a user. It is composed of three sub-models: Lifestyle, Food, and Wine. Attributes: None. Relationships: The Personality model has three sub-models: Lifestyle, Food, and Wine. Each of these sub-models has a one-to-one relationship with the Personality model. Custom Methods: initialize(user): Initializes a new instance of the Personality model with a given user. result: Returns a hash containing the results of the Lifestyle, Food, and Wine sub-models. Examples of usage: user = User.find(1) personality = Personality.new(user) results = personality.result Photo The Photo model represents a photo that belongs to an owner object through polymorphic association. It has the following attributes: id : a unique integer identifier for the photo, generated by the database owner_id : an integer representing the ID of the owner object that this photo belongs to owner_type : a string representing the type of the owner object that this photo belongs to (e.g. \"Branch\", \"User\") image : a string representing the location of the photo file on the filesystem or in a file storage service (e.g. Amazon S3) created_at : a datetime representing the time when the photo was created updated_at : a datetime representing the time when the photo was last updated photo_type : a string representing the type of the photo (e.g. \"logo\", \"cover photo\") The Photo model also has the following relationships: belongs_to :owner, polymorphic: true, touch: true : this indicates that a photo belongs to an owner object, and the owner object can be any type of object (specified by the owner_type attribute). The touch: true option tells Rails to update the updated_at timestamp of the owner object when the photo is updated. The Photo model has the following custom methods: safe_recreate_versions! : this method is used to recreate the different versions (resized versions) of the photo file. It first retrieves the original file from the cache, then recreates the versions and saves the changes to the model. preview_data : this method returns a base64-encoded version of the photo file's preview version, suitable for use in a data URI. It uses the Rails.cache to store the result and avoid recalculating it every time it is called. An example of usage for the Photo model might be: # Create a new photo for a branch object branch = Branch.first photo = Photo.new(owner: branch, image: params[:image]) if photo.save PreferenceGroup The PreferenceGroup model represents a group of questions that are related to each other. It has the following attributes: id: a unique identifier for the preference group (integer, primary key). title: a string representing the title of the preference group. question_ids: an array of integers representing the ids of the questions that belong to the preference group. created_at: a datetime representing when the preference group was created. updated_at: a datetime representing the last time the preference group was updated. It has the following relationships: has_many :role_preference_group_assignments: this indicates that a preference group can have many assignments to roles. It has the following custom methods: question_ids=: this method is used to set the question_ids attribute, and it removes any blank values from the array of new ids before saving them. questions: this method returns a collection of Question objects that belong to the preference group, based on the question_ids attribute. An example of usage could be: # Find the preference group with id 1 pg = PreferenceGroup.find(1) # Display the title of the preference group puts pg.title # => \"Food Preferences\" # Display the questions that belong to the preference group pg.questions.each do |question| puts question.text end # => \"What is your favourite type of cuisine?\" # => \"Do you have any dietary restrictions?\" # => \"Do you have any food allergies?\" ProfileRequest The ProfileRequest model represents a request made by a user for access to a branch's profile page. It has the following attributes: id : a unique identifier for the request branch_id : the ID of the branch that the user is requesting access to user_id : the ID of the user making the request created_at : a timestamp for when the request was created updated_at : a timestamp for when the request was last updated It has the following relationships: belongs_to :branch: indicates that each ProfileRequest belongs to a single Branch belongs_to :user: indicates that each ProfileRequest belongs to a single User It does not have any custom methods or examples of usage. Question The Question model represents a question that can be asked to a user. It has various attributes such as title, kind, and locking_conditions that define the question and its behavior. The Question model also has relationships with other models such as Category, Photo, Answer, and UserAnswer. Attributes id (bigint, primary key) : a unique identifier for the question. category_id (integer) : the id of the category that the question belongs to. title (citext) : the title of the question. kind (string) : the type of question, which can be one of the following values: 'option', 'unordered_list', 'ordered_list', 'boolean', 'number', 'number_range', 'temperature', 'temperature_range', 'text', 'time', 'time_range'. created_at (datetime) : the timestamp when the question was created. updated_at (datetime) : the timestamp when the question was last updated. locking_conditions (jsonb) : a JSON object that defines the conditions under which the question should be locked. intro (boolean) : a flag indicating whether the question is an introduction question. allows_note (boolean) : a flag indicating whether the question allows the user to add a note. note_title (string) : the title of the note that the user can add to the question. processed_at (datetime) : the timestamp when the question was processed. text_style (string) : the style of the text for the question. Can be one of the following values: 'dark', 'light', 'dark-gold', 'light-gold'. blur_background (boolean) : a flag indicating whether the background should be blurred for the question. background_overlay (boolean): a flag indicating whether there should be an overlay on the background for the question. Relationships category (belongs_to) : the category that the question belongs to. photo (has_one) : the photo that is associated with the question. answers (has_many) : the answers that are available for the question. user_answers (has_many) : the answers that have been given by users for the question. Custom Methods enumerable_kind? : returns a boolean indicating whether the question is one of the following types: 'option', 'unordered_list', 'ordered_list', 'boolean', 'number', 'number_range', 'temperature', 'temperature_range'. diverse_kind? : returns a boolean indicating whether the question is one of the following types: 'text', 'time', 'time_range'. Examples of Usage Here are some examples of how the Question model can be used: To create a new question: question = Question.new(title: 'What is your favorite color?', kind: 'option') question.save To retrieve all the questions in a particular category: category = Category.find_by(name: 'Personal') questions = Question.in_category(category) Rating The Rating model represents a rating given by a user for a particular branch. It has various attributes such as value that define the rating, and relationships with other models such as Branch and User. Attributes id (bigint, primary key) : a unique identifier for the rating. branch_id (bigint) : the id of the branch that the rating is for. user_id (bigint) : the id of the user who gave the rating. value (integer) : the value of the rating, which must be an integer between 1 and 5. created_at (datetime) : the timestamp when the rating was created. updated_at (datetime) : the timestamp when the rating was last updated. Relationships branch (belongs_to) : the branch that the rating is for. user (belongs_to) : the user who gave the rating. Custom Methods There are no custom methods defined in the Rating model. Examples of Usage Here are some examples of how the Rating model can be used: To create a new rating: branch = Branch.find_by(name: 'My Branch') user = User.find_by(email: 'user@example.com') rating = Rating.new(branch: branch, user: user, value: 4) rating.save To retrieve all the ratings for a particular branch: branch = Branch.find_by(name: 'My Branch') ratings = Rating.where(branch: branch) To retrieve the average rating value for a particular branch: branch = Branch.find_by(name: 'My Branch') average_rating = Rating.where(branch: branch).average(:value) Release The Release model represents a release of data. It has various attributes such as file and status that define the release, and a relationship with the ReleaseFileUploader uploader. Attributes id (bigint, primary key) : a unique identifier for the release. file (string) : the file that contains the data for the release. status (string) : the status of the release, which can be one of the following values: 'queued', 'processing', 'complete'. created_at (datetime) : the timestamp when the release was created. updated_at (datetime) : the timestamp when the release was last updated. Relationships file (mount_uploader) : the ReleaseFileUploader uploader that is used to handle the file for the release. Custom Methods latest : returns the latest complete release. latest_timestamp : returns the timestamp of the latest complete release. latest_id : returns the id of the latest complete release. latest? : returns a boolean indicating whether the release is the latest complete release. queued? : returns a boolean indicating whether the release is in the 'queued' status. processing? : returns a boolean indicating whether the release is in the 'processing' status. complete? : returns a boolean indicating whether the release is in the 'complete' status. process! : sets the status of the release to 'processing' and broadcasts the status change. complete! : sets the status of the release to 'complete' and broadcasts the status change. Examples of Usage Here are some examples of how the Release model can be used: To create a new release: release = Release.new(file: '/path/to/file.csv') release.save To retrieve the latest complete release: latest_release = Release.latest To retrieve the timestamp of the latest complete release: latest_timestamp = Release.latest_timestamp To check if a particular release is the latest complete release: release = Release.find(1) release.latest? To set the status of a release to 'processing': release = Release.find(1) release.process! To set the status of a release to 'complete': release = Release.find(1) release.complete! RoleAssignment The RoleAssignment model represents a role that has been assigned to a staff member. It has various attributes such as role_id and staff_member_id that define the assignment, and relationships with other models such as Role and StaffMember. Attributes id (bigint, primary key) : a unique identifier for the role assignment. role_id (bigint) : the id of the role that has been assigned. staff_member_id (bigint) : the id of the staff member who has been assigned the role. archived_at (datetime) : the timestamp when the role assignment was archived. created_at (datetime) : the timestamp when the role assignment was created. updated_at (datetime) : the timestamp when the role assignment was last updated. Relationships role (belongs_to) : the role that has been assigned. staff_member (belongs_to) : the staff member who has been assigned the role. Custom Methods There are no custom methods defined in the RoleAssignment model. Examples of Usage Here are some examples of how the RoleAssignment model can be used: To create a new role assignment: role = Role.find_by(name: 'Manager') staff_member = StaffMember.find_by(email: 'staff@example.com') role_assignment = RoleAssignment.new(role: role, staff_member: staff_member) role_assignment.save To retrieve all the role assignments for a particular role: role = Role.find_by(name: 'Manager') role_assignments = RoleAssignment.where(role: role) To retrieve all the role assignments for a particular staff member: staff_member = StaffMember.find_by(email: 'staff@example.com') role_assignments = RoleAssignment.where(staff_member: staff_member) RolePreferenceGroupAssignment The RolePreferenceGroupAssignment model represents the assignment of a preference group to a role. It has various attributes such as role_id, preference_group_id, and position that define the assignment, and relationships with other models such as Role and PreferenceGroup. Attributes id (bigint, primary key) : a unique identifier for the role preference group assignment. role_id (bigint) : the id of the role to which the preference group has been assigned. preference_group_id (bigint) : the id of the preference group that has been assigned to the role. position (integer) : the position of the preference group within the role. column (string) : the column in which the preference group should be displayed (either 'left' or 'right'). created_at (datetime) : the timestamp when the role preference group assignment was created. updated_at (datetime) : the timestamp when the role preference group assignment was last updated. Relationships role (belongs_to) : the role to which the preference group has been assigned. preference_group (belongs_to) : the preference group that has been assigned to the role. **Custom Methods left : a scope that returns all the role preference group assignments with the column attribute set to 'left'. right : a scope that returns all the role preference group assignments with the column attribute set to 'right'. Examples of Usage Here are some examples of how the RolePreferenceGroupAssignment model can be used: To create a new role preference group assignment: role = Role.find_by(name: 'Manager') preference_group = PreferenceGroup.find_by(name: 'General') role_preference_group_assignment = RolePreferenceGroupAssignment.new( role: role, preference_group: preference_group, position: 1, column: 'left' ) role_preference_group Role The Role model represents a role within an organization. It has various attributes such as name, business_unit_id, and interactions that define the role, and relationships with other models such as BusinessUnit, StaffMember, and MemberRequestType. Attributes id (bigint, primary key) :a unique identifier for the role. name (string) :the name of the role. created_at (datetime) :the timestamp when the role was created. updated_at (datetime) :the timestamp when the role was last updated. archived_at (datetime) :the timestamp when the role was archived (if applicable). business_unit_id (bigint) :the id of the business unit to which the role belongs. top_questions_data (jsonb) :a JSON object containing data about the top questions for the role. interactions (string, array) :an array of strings representing the interactions that are allowed for the role. Relationships business_unit (belongs_to) :the business unit to which the role belongs. organisation (has_one, through: business_unit) :the organization to which the role belongs. role_assignments (has_many) :the assignments of staff members to the role. staff_members (has_many, through: role_assignments) :the staff members who have been assigned to the role. member_request_type_assignments (has_many) :the assignments of member request types to the role. member_request_types (has_many, through: member_request_type_assignments) :the member request types that have been assigned to the role. Custom Methods **top_questions_data=: a setter method that sets the top_questions_data attribute and converts the values to integers. top_question(position) :a method that returns the id of the top question at the specified position. top_question_ids : a method that returns an array of ids of the top questions for the role. top_questions : a method that returns the top questions for the role as a collection of Question objects. Share The Share model represents a user's request to share a Branch with another user. It has several attributes: branch_id : an integer that represents the Branch being shared user_id : an integer that represents the User making the request status : a string that represents the current state of the share request (e.g. requested, authorised, revoked, denied) via : a string that represents how the request was made (e.g. web, email, sms) requested_at, authorised_at, denied_at, revoked_at : timestamps for when the respective actions were taken It has several relationships: belongs_to :branch : a Share belongs to a Branch belongs_to :user : a Share belongs to a User It has several custom methods: request, authorise, deny, revoke : methods that update the status attribute and perform other actions depending on the transition (e.g. sending notifications, scheduling a reminder job). These methods are implemented using the aasm gem for state management. revoke_all : a class method that updates the status attribute of all authorised shares to revoked create_request_notification, authorise_notifications, deny_notifications, update_notifications, schedule_reminder, notify_graphql_share_change : private methods that perform actions such as creating notifications, scheduling jobs, and triggering GraphQL subscriptions. An example of usage: share = Share.new(branch_id: 1, user_id: 2) share.request This will create a new Share object with a status of requested, and trigger the create_request_notification method to send a notification to the user. StaffAssignment The StaffAssignment model represents an association between a staff member and a target object. The target object can be any object that has an id column in the database and is polymorphic (can be associated with multiple types of objects). Attributes id : A big integer primary key. staff_member_id : An integer that represents the id of the associated staff member. target_type : A string that represents the class name of the associated target object. target_id : An integer that represents the id of the associated target object. created_at : A datetime that represents the time at which the staff assignment was created. updated_at : A datetime that represents the time at which the staff assignment was last updated. archived_at : A datetime that represents the time at which the staff assignment was archived. Relationships belongs_to :staff_member: The staff assignment belongs to a staff member. belongs_to :target, polymorphic: true: The staff assignment belongs to a target object that is polymorphic. Custom Methods None. Examples of Usage Suppose we have a Project model and a StaffMember model and we want to create a staff assignment that associates a staff member with a project. We could do so as follows: project = Project.find(1) staff_member = StaffMember.find(2) staff_assignment = StaffAssignment.new( staff_member: staff_member, target: project ) if staff_assignment.save puts \"Staff assignment created successfully!\" else puts \"Error creating staff assignment: #{staff_assignment.errors.full_messages.join(', ')}\" end TopQuestion The TopQuestion model is a subclass of the Question model, which represents a question that can be asked to users. It has the following attributes: id : a primary key, an integer, that uniquely identifies the question. category_id : an integer that represents the category to which the question belongs. title : a string that represents the title of the question. kind : a string that represents the type of question, such as multiple choice or true/false. created_at : a datetime that represents the time when the question was created. updated_at : a datetime that represents the time when the question was last updated. locking_conditions : a jsonb field that represents the conditions under which the question is locked. intro : a boolean field that represents whether the question is an introduction question or not. allows_note : a boolean field that represents whether the question allows users to add a note or not. note_title : a string that represents the title of the note that users can add. processed_at : a datetime that represents the time when the question was processed. text_style : a string that represents the style of the text used in the question. blur_background : a boolean field that represents whether the background of the question should be blurred or not. background_overlay : a boolean field that represents whether an overlay should be applied to the background of the question or not. The TopQuestion model has the following custom method: answers: returns a relation that represents the answers given by the user specified by the user_id class attribute to the question. An example of usage of the TopQuestion model is as follows: # Set the user ID for the current thread TopQuestion.user_id = current_user.id # Find the top question for the user top_question = TopQuestion.find(params[:id]) # Get the answers given by the user to the top question answers = top_question.answers UserAnswer The UserAnswer model represents an answer to a question by a user. It has the following attributes: id : a unique identifier for the answer, stored as a bigint user_id : the identifier of the user who provided the answer, stored as an integer question_id : the identifier of the question being answered, stored as an integer created_at : a timestamp for when the answer was created, stored as a datetime updated_at : a timestamp for when the answer was last updated, stored as a datetime note : a text field for storing a note or explanation related to the answer values : a text field for storing the actual answer, which can be serialized into different data types depending on the type of the question It has the following relationships: belongs_to :question : each answer belongs to a single question belongs_to :user : each answer is provided by a single user It has the following custom methods: Question::KINDS.each do |kind_name| define_method(\"#{kind_name}?\") { kind == kind_name } end : this generates methods for each type of question, such as ordered_list?, unordered_list?, text?, etc., which return a boolean indicating whether the answer's question has the corresponding type. values_format : a private method that validates the format of the values attribute based on the type of the question. If the format is invalid, it adds an error to the values attribute. Here are some examples of how the UserAnswer model could be used: # Create a new user answer answer = UserAnswer.new(user_id: 1, question_id: 2, values: 'This is my answer') answer.save # Find a user answer by its id answer = UserAnswer.find(5) # Update an existing user answer answer.values = 'This is my updated answer' answer.save # Check if a user answer's question is of a certain type answer.text? # returns true if the question is a text type, false otherwise # Access the user and question associated with a user answer user = answer.user question = answer.question VideoContentCategory VideoContentCategory is a model in a Ruby on Rails application that represents the many-to-many relationship between videos and content categories. It has the following attributes: id : a bigint that serves as the primary key for the model and is automatically generated by the database. video_id : a bigint that represents the foreign key for the video model. content_category_id : a bigint that represents the foreign key for the content_category model. created_at : a datetime that represents when the record was created. updated_at : a datetime that represents when the record was last updated. It has the following relationships: belongs_to :video : This indicates that each instance of the VideoContentCategory model belongs to a single video model. belongs_to :content_category : This indicates that each instance of the VideoContentCategory model belongs to a single content_category model. It has the following custom methods: None. Here is an example of how the VideoContentCategory model might be used: # Create a new video content category record that associates a video with a content category video_content_category = VideoContentCategory.new(video_id: 1, content_category_id: 2) # Save the video content category record to the database video_content_category.save Video Video is a model in a Ruby on Rails application that represents a video that can be published and viewed by users. It has the following attributes: id : a bigint that serves as the primary key for the model and is automatically generated by the database. name : a string that represents the name of the video. description : a text field that provides a description of the video. url : a string that represents the URL of the video. published_at : a datetime that represents when the video was published. organisation_id : a bigint that represents the foreign key for the organisation model. vista_admin_id : a bigint that represents the foreign key for the vista_admin model. notification_job_id : an integer that represents the ID of a notification job related to the video. created_at : a datetime that represents when the record was created. updated_at : a datetime that represents when the record was last updated. published : a boolean that indicates whether the video has been published or not. archived_at : a datetime that represents when the video was archived. platform_id : a string that represents the ID of the video on a platform like Vimeo. It has the following relationships: has_many :video_content_categories, dependent: :destroy : This indicates that a video can have many video content categories and that these should be destroyed when the video is destroyed. has_many :content_categories, through: :video_content_categories : This indicates that a video can have many content categories through its video content categories. belongs_to :vista_admin : This indicates that a video belongs to a single vista admin. belongs_to :organisation, optional : true: This indicates that a video can optionally belong to an organisation. It has the following custom methods: check_published_status : This method is called before the video is saved and checks if the published status has changed. If it has and the video is being published, it sets the published_at attribute to the current time. extract_platform_id : This method is called before the video is saved and extracts the ID of the video on a platform like Vimeo from the url attribute. It also has the following scope methods: in_organisation : This scope filters videos by the given organisation. newest_first : This scope orders videos by their created_at attribute in descending order. for_vista : This scope filters videos that do not belong to an organisation. search : This scope filters videos by a search term that is matched against the name and description attributes. published : This scope filters published videos. Here is an example of how the Video model might be used: Copy code # Find all published videos in an organisation videos = Video.in_organisation(1).published # Find the most recently created video newest_video = Video.newest_first.first # Search for videos with the term 'cat' in their name or description cat_videos = Video.search('cat') VistaAdmin VistaAdmin is a model in a Ruby on Rails application that represents an administrator for the Vista platform. It has the following attributes: id : a bigint that serves as the primary key for the model and is automatically generated by the database. first_name : a string that represents the first name of the administrator. last_name : a string that represents the last name of the administrator. email : a string that represents the email address of the administrator. encrypted_password : a string that represents the encrypted password of the administrator. reset_password_token : a string that represents a token used for resetting the password. reset_password_sent_at : a datetime that represents when the reset password token was sent. remember_created_at : a datetime that represents when the administrator chose to be remembered. sign_in_count : an integer that represents the number of times the administrator has signed in. current_sign_in_at : a datetime that represents the current sign in time of the administrator. last_sign_in_at : a datetime that represents the last sign in time of the administrator. current_sign_in_ip : an inet field that represents the current sign in IP address of the administrator. last_sign_in_ip : an inet field that represents the last sign in IP address of the administrator. confirmation_token : a string that represents a confirmation token for the administrator. confirmed_at : a datetime that represents when the administrator was confirmed. confirmation_sent_at : a datetime that represents when the confirmation token was sent. unconfirmed_email : a string that represents the unconfirmed email address of the administrator. failed_attempts : an integer that represents the number of failed attempts by the administrator. unlock_token : a string that represents a token used to unlock the administrator's account. locked_at : a datetime that represents when the administrator's account was locked. created_at : a datetime that represents when the record was created. updated_at : a datetime that represents when the record was last updated. It has the following relationships: has_many :videos : This indicates that a VistaAdmin can have many videos. It has the following custom methods: attempt_set_password : This method allows the administrator to set a new password without knowing the current password. no_password? : This method returns a boolean indicating whether the administrator has a password set. only_if_unconfirmed : This method yields to a block if the administrator has not been confirmed. password_match? : This method returns a boolean indicating whether the entered password and password confirmation match. It also includes the Devise module for authentication and confirmation. Here is an example of how the VistaAdmin model might be used: # Find a VistaAdmin by email vista_admin = VistaAdmin.find_by(email: 'admin@example.com') # Check if the VistaAdmin's password is blank if vista_admin.no_password?","title":"structure"},{"location":"models/#models","text":"","title":"Models"},{"location":"models/#folder-structure","text":"\u251c\u2500\u2500\u2500models \u251c\u2500\u2500\u2500concerns \u251c\u2500\u2500\u2500personality \u2514\u2500\u2500\u2500versions","title":"Folder structure"},{"location":"models/#address","text":"The Address model represents an address in the system. It has the following attributes: id (integer): a unique ID for the address label (string): a label or nickname for the address line1 (string): the first line of the address line2 (string): the second line of the address town (string): the town or city where the address is located county (string): the county or region where the address is located postcode (string): the postal code for the address country (string): the country where the address is located phone (string): a phone number associated with the address latitude (decimal): the latitude of the address longitude (decimal): the longitude of the address addressable_type (string): the type of model that the address belongs to** (e.g. \"User\" or \"Company\") addressable_id (integer): the ID of the model that the address belongs to created_at (datetime): the date and time that the address was created updated_at (datetime): the date and time that the address was last updated city_id (integer): the ID of the city where the address is located The Address model has the following relationships: belongs_to :addressable, polymorphic: true: this indicates that the address belongs to a parent model, and the addressable_type and addressable_id attributes are used to specify which model the address belongs to. The polymorphic option indicates that the parent model can be any type of model, and the inverse_of: :address option specifies the name of the has_one or has_many association on the parent model. belongs_to :city: this indicates that the address belongs to a city. The city_id attribute is used to specify which city the address belongs to. The Address model has the following custom methods: country_name: this method returns the name of the country for the address. It uses the ISO3166 gem to look up the name of the country based on the country attribute. country_code: this method returns the country code for the address. It simply returns the value of the country attribute. Here are some examples of how the Address model might be used: # Find all addresses for a user user = User.find(123) addresses = user.addresses # Find the nearest address to a given location latitude = 37.774929 longitude = -122.419416 radius = 5 # miles addresses = Address.within(radius, origin: [latitude, longitude]) # Find the address for a specific user user = User.find(123) address = user.address # Set the address for a user user = User.find(123)","title":"Address"},{"location":"models/#admin","text":"The following are the Attributes of Admin: id : bigint, primary key for the model email : string, the email address of the admin first_name : string, the first name of the admin last_name : string, the last name of the admin mobile_number : string, the mobile phone number of the admin encrypted_password : string, a hashed version of the admin's password reset_password_token : string, a token used for resetting the admin's password reset_password_sent_at : datetime, the time at which the reset password token was sent remember_created_at : datetime, the time at which the admin selected the \"remember me\" option during login sign_in_count : integer, the number of times the admin has signed in current_sign_in_at : datetime, the time at which the admin signed in during the current session last_sign_in_at : datetime, the time at which the admin signed in during the previous session current_sign_in_ip : inet, the IP address of the admin during the current session last_sign_in_ip : inet, the IP address of the admin during the previous session authentication_token : string, a token used for authenticating the admin created_at : datetime, the time at which the admin's record was created updated_at : datetime, the time at which the admin's record was last updated organisation_id : bigint, the ID of the organization to which the admin belongs type : string, the type of staff member (in this case, \"Admin\") employee_id : string, the employee ID of the admin confirmation_token : string, a token used for confirming the admin's email address confirmed_at : datetime, the time at which the admin's email address was confirmed confirmation_sent_at : datetime, the time at which the confirmation token was sent suspended_at : datetime, the time at which the admin's access was suspended archived_at : datetime, the time at which the admin's record was archived encrypted_pin : string, a hashed version of the admin's PIN (personal identification number) unconfirmed_email : string, the unconfirmed email address of the admin (if the admin has requested a change to their email address) Inherits from StaffMember model Custom methods: None Examples of usage: An instance of the Admin model could represent a staff member with administrative privileges within an organization. The email, password, and authentication token attributes could be used for authenticating the admin when logging in to the system. The sign_in_count, current_sign_in_at, and last_sign_in_at attributes could be used for tracking the admin's login history.","title":"Admin"},{"location":"models/#answer","text":"Attributes: id (integer): The primary key for the model. question_id (integer): The ID of the question that the answer belongs to. title (text): The title of the answer. description (text): A description of the answer. created_at (datetime): The timestamp for when the answer was created. updated_at (datetime): The timestamp for when the answer was last updated. position (integer): The position of the answer within its parent question. Relationships: question (belongs_to): The question that the answer belongs to. photo (has_one): The photo associated with the answer. Custom methods: siblings : Returns the other answers within the same question as the current answer. reject_photo? : Determines whether a photo should be rejected when creating or updating an answer. set_position : Sets the position of the answer within its parent question. Examples of usage: # Create a new answer with a title and description answer = Answer.new(title: 'Yes', description: 'The answer is yes') # Set the question that the answer belongs to answer.question = Question.first # Save the answer answer.save # Update the title of the answer answer.title = 'Yes, definitely' answer.save # Delete the answer answer.destroy","title":"Answer"},{"location":"models/#applicationrecord","text":"Attributes: None. ApplicationRecord is an abstract base class and does not have any attributes of its own. Relationships: None. ApplicationRecord is an abstract base class and does not have any relationships of its own. Custom methods: updated_since(datetime): Returns all records that have been updated since the specified datetime. pluck_to_hash(*keys): Returns an array of hashes, where each hash represents a record in the database with keys corresponding to the specified attributes. Examples of usage: # Find all records in the database that have been updated since yesterday ApplicationRecord.updated_since(1.day.ago) # Retrieve the IDs and titles of all records in the database ApplicationRecord.pluck_to_hash(:id, :title) Note: ApplicationRecord is an abstract base class and cannot be instantiated directly. Instead, you will need to use a concrete subclass of ApplicationRecord (such as Answer, Question, etc.) to create and manipulate records in the database.","title":"ApplicationRecord"},{"location":"models/#articlecontentcategory","text":"Attributes: id (integer): The primary key for the model. article_id (integer): The ID of the article that the content category belongs to. content_category_id (integer): The ID of the content category. created_at (datetime): The timestamp for when the article content category was created. updated_at (datetime): The timestamp for when the article content category was last updated. Relationships: article (belongs_to): The article that the content category belongs to. content_category (belongs_to): The content category. Custom methods: None. Examples of usage: # Create a new article content category article_content_category = ArticleContentCategory.new # Set the article and content category that the article content category belongs to article_content_category.article = Article.first article_content_category.content_category = ContentCategory.first # Save the article content category article_content_category.save # Delete the article content category article_content_category.destroy","title":"ArticleContentCategory"},{"location":"models/#article","text":"Attributes: id (integer): The primary key for the model. title (string): The title of the article. content (text): The content of the article. publish_at (datetime): The timestamp for when the article should be published. created_at (datetime): The timestamp for when the article was created. updated_at (datetime): The timestamp for when the article was last updated. notification_job_id (integer): The ID of the job used to send notifications when the article is published. Relationships: header_image (has_one): The header image for the article. photos (has_many): The photos associated with the article. article_content_categories (has_many): The article content categories associated with the article. content_categories (has_many): The content categories associated with the article. Custom methods: header_image=(header_image) : Sets the header image for the article. publish_at=(publish_at) : Sets the publish timestamp for the article. published? : Returns true if the article has been published, false otherwise. status : Returns the current status of the article. self.start_draft : Creates a new draft article. Examples of usage: # Create a new article article = Article.new # Set the title and content of the article article.title = 'My article' article.content = 'This is the content of my article' # Set the publish timestamp for the article article.publish_at = 1.day.from_now # Save the article article.save # Check if the article has been published article.published? # Get the status of the article article.status # Delete the article article.destroy","title":"Article"},{"location":"models/#authenticationtoken","text":"The AuthenticationToken model represents a token that is used to authenticate a user. It belongs to a polymorphic user, which means that it can belong to any model that includes the User module. Attributes: id : a unique identifier for the token (integer, primary key) context : the context in which the token is used (string) body : the actual token (string) user_type : the type of the user that the token belongs to (string) user_id : the ID of the user that the token belongs to (integer) last_used_at : the last time the token was used (datetime) ip_address : the IP address from which the token was last used (inet) user_agent : the user agent string from the device that used the token last (string) created_at : the time the token was created (datetime) updated_at : the time the token was last updated (datetime) Relationships: user : the user that the token belongs to (polymorphic association) Custom methods: decode : decodes a token from the headers find_for_context : finds a token for a given context and token body create_and_return_staff_token : creates a new staff token and returns it create_and_return_manager_token : creates a new manager token and returns it create_and_return_token : creates a new token for a given context and returns it create_and_return_analytics_token : creates and returns an analytics token Examples of usage: To create a new staff token for a user: token = AuthenticationToken.create_and_return_staff_token(current_user, request) To find a token for a given context and token body: token = AuthenticationToken.find_for","title":"AuthenticationToken"},{"location":"models/#branchcategorisation","text":"The BranchCategorisation model represents the many-to-many relationship between branches and partner categories. This allows a branch to be associated with one or more partner categories, and a partner category to be associated with one or more branches. Attributes: id : A unique identifier for the branch categorisation record, stored as an integer and generated automatically by the database. branch_id : The ID of the branch that is associated with a partner category, stored as an integer. partner_category_id : The ID of the partner category that is associated with a branch, stored as an integer. created_at : A timestamp indicating when the branch categorisation record was created, stored as a datetime. updated_at : A timestamp indicating when the branch categorisation record was last updated, stored as a datetime. Relationships: belongs_to : A branch categorisation belongs to a single branch and a single partner category. branch : This relationship specifies the branch that is associated with a partner category. partner_category : This relationship specifies the partner category that is associated with a branch. Custom methods: There are no custom methods defined for the BranchCategorisation model. Examples of usage: Creating a new branch categorisation: branch = Branch.first partner_category = PartnerCategory.first branch_categorisation = BranchCategorisation.new(branch: branch, partner_category: partner_category) branch_categorisation.save Retrieving all branch categorisations for a particular branch: branch = Branch.first branch_categorisations = branch.branch_categorisations Retrieving all branches that belong to a particular partner category: partner_category = PartnerCategory.first branches = partner_category.branches Removing a branch categorisation: branch_categorisation = BranchCategorisation.first branch_categorisation.destroy","title":"BranchCategorisation"},{"location":"models/#branchmanager","text":"The BranchManager model is a subclass of the StaffMember model and represents a staff member who is a branch manager at an organisation. attributes: id : a bigint that serves as the primary key for the model email : a string that stores the email address of the staff member first_name : a string that stores the first name of the staff member last_name : a string that stores the last name of the staff member mobile_number : a string that stores the mobile phone number of the staff member encrypted_password : a string that stores the encrypted password of the staff member reset_password_token : a string that stores a token used to reset the staff member's password reset_password_sent_at : a datetime that stores the time at which the reset password token was sent to the staff member remember_created_at : a datetime that stores the time at which the staff member requested to be remembered on the device they are using sign_in_count : an integer that stores the number of times the staff member has signed in current_sign_in_at : a datetime that stores the time at which the staff member last signed in last_sign_in_at : a datetime that stores the time at which the staff member signed in before the last time they signed in current_sign_in_ip : an inet data type that stores the IP address the staff member is currently signed in from last_sign_in_ip : an inet data type that stores the IP address the staff member last signed in from authentication_token : a string that stores a unique token used for authentication purposes created_at : a datetime that stores the time at which the staff Relationships: BranchManager has a one-to-many relationship with Branch through the branches association. Custom methods: assigned_branches: returns a collection of branches that the branch manager is assigned to. Examples of usage: # Find a branch manager by their email and assign them to a branch manager = BranchManager.find_by(email: 'branch_manager@example.com') branch = Branch.find(1) manager.branches << branch # Find all the branches that a branch manager is assigned to manager = BranchManager.find(1) manager.assigned_branches","title":"BranchManager"},{"location":"models/#branch","text":"Attributes: id : integer, primary key business_unit_id : integer name : string created_at : datetime updated_at : datetime email : string telephone : string archived_at : datetime image : string branch_info : string booking_url : string vista_partner : boolean, default: false ratings_count : integer, default: 0 Relationships: business_unit : belongs to a BusinessUnit organisation : has one Organisation through the BusinessUnit photo : has one Photo as owner address : has one Address as addressable staff_assignments : has many StaffAssignments as target staff_members : has many StaffMembers through StaffAssignments shares : has many Shares users : has many Users through Shares with the condition that the Share is authorised branch_categorisations : has many BranchCategorisations categories : has many PartnerCategories through BranchCategorisations interactions : has many Interactions roles : has many Roles through the BusinessUnit check_ins : has many CheckIns member_requests : has many MemberRequests member_request_messages : has many MemberRequestMessages as messageable Custom methods: category_titles : returns an array of the titles of the categories associated with the branch destroy_staff : destroys the staff members associated with the branch","title":"Branch"},{"location":"models/#businessunit","text":"Attributes: id : integer, primary key name : string organisation_id : integer, foreign key to the organisations table created_at : datetime updated_at : datetime archived_at : datetime Relationships: belongs_to :organisation has_many :branches has_many :roles has_many :member_request_types Custom methods: None Examples of usage: Fetch all business units belonging to a particular organisation: organisation = Organisation.find(1) business_units = organisation.business_units Fetch all branches belonging to a particular business unit: business_unit = BusinessUnit.find(1) branches = business_unit.branches Fetch all roles belonging to a particular business unit: business_unit = BusinessUnit.find(1) roles = business_unit.roles Fetch all member request types belonging to a particular business unit: business_unit = BusinessUnit.find(1) member_request_types = business_unit.member_request_types","title":"BusinessUnit"},{"location":"models/#categoryupdate","text":"Attributes: id : integer category_id : integer question_ids : array of integers created_at : datetime updated_at : datetime Relationships: belongs_to :category Custom methods : title : returns the title of the associated category photo : returns the photo of the associated category questions : returns an array of Question objects that have an id in the question_ids attribute Examples of usage: Find the category update with id 1 update = CategoryUpdate.find(1) Access the title of the associated category update.title Access the photo of the associated category update.photo Access the questions associated with this update update.questions","title":"CategoryUpdate"},{"location":"models/#category","text":"It has the following attributes: id : a unique identifier for the update, stored as a bigint category_id : a foreign key referencing the category that this update is for question_ids : an array of integers representing the question IDs that are associated with this update created_at : a timestamp for when the update was created updated_at : a timestamp for when the update was last updated It has the following relationships: belongs_to :category : indicates that each category update belongs to a single category It has the following custom methods: title : returns the title of the category that this update is for. If the category's title is \"general\" and it has a parent, the parent's title is returned instead. photo : returns the photo of the category that this update is for. questions: returns a collection of Question objects that are associated with this update. Here is an example of how the CategoryUpdate model could be used: Find a category update by its ID update = CategoryUpdate.find(1) Access the title of the update's category puts update.title Access the questions associated with the update questions = update.questions","title":"Category"},{"location":"models/#checkin","text":"The CheckIn model represents a check-in by a user to a branch in the application. It has the following attributes: id : a unique identifier for the check-in, stored as a bigint user_id : a foreign key referencing the user who checked in branch_id : a foreign key referencing the branch that the user checked in to arrival_date : a date representing the date on which the user checked in arrival_time_start : a time representing the start time of the user's check-in arrival_time_end : a time representing the end time of the user's check-in created_at : a timestamp for when the check-in was created updated_at : a timestamp for when the check-in was last updated It has the following relationships: belongs_to :user, touch: true : indicates that each check-in belongs to a single user, and the updated_at timestamp of the user will be updated whenever this check-in is saved. belongs_to :branch: indicates that each check-in belongs to a single branch It has the following custom methods: earliest : a scope that orders check-ins by their arrival_date in ascending order. future: a scope that filters check-ins to only include those with an arrival_date in the future. for_branch: a scope that filters check-ins to only include those for a particular branch. Here is an example of how the CheckIn model could be used: Find a user by their ID user = User.find(1) Find a branch by its ID branch = Branch.find(1) Create a new check-in for the user at the branch check_in = CheckIn.new(user: user, branch: branch, arrival_date: Date.today, arrival_time_start: Time.now) Save the check-in check_in.save Find all future check-ins for a particular branch future_check_ins = CheckIn.for_branch(branch).future","title":"CheckIn"},{"location":"models/#city","text":"The City model represents a city in the application. It has the following attributes: id : a unique identifier for the city, stored as a bigint name : the name of the city created_at : a timestamp for when the city was created updated_at : a timestamp for when the city was last updated status : a string representing the status of the city, with possible values of \"enabled\", \"disabled\", and \"coming_soon\" It has the following relationships: HasPhoto : indicates that the City model includes the HasPhoto module, which provides it with the ability to have a photo associated with it. It has the following custom methods: to_s : returns the name of the city as a string. It also has the following scopes: default_scope : orders cities by their name in ascending order. not_disabled : filters cities to only include those with a status of \"enabled\" or \"coming_soon\". Here is an example of how the City model could be used: Find a city by its ID city = City.find(1) Access the name of the city puts city.name Update the status of the city city.status = \"disabled\" city.save Find all cities that are not disabled cities = City.not_disabled","title":"City"},{"location":"models/#contentcategory","text":"The ContentCategory model represents a category for organizing content (e.g. articles, videos) in the application. It has the following attributes: id : a unique identifier for the content category, stored as a bigint name : the name of the content category created_at : a timestamp for when the content category was created updated_at : a timestamp for when the content category was last updated It has the following relationships: has_many :article_content_categories, dependent: :destroy: indicates that each content category can have many associations with articles through the article_content_categories join table, and these associations will be destroyed if the content category is deleted. has_many :articles, through: :article_content_categories : indicates that a content category can have many articles associated with it through the article_content_categories join table. has_many :video_content_categories, dependent: :destroy : indicates that each content category can have many associations with videos through the video_content_categories join table, and these associations will be destroyed if the content category is deleted. has_many :videos, through: :video_content_categories : indicates that a content category can have many videos associated with it through the video_content_categories join table. Here is an example of how the ContentCategory model could be used: Find a content category by its ID category = ContentCategory.find(1) Access the name of the category puts category.name Find all articles in the category articles = category.articles Find all videos in the category videos = category.videos Create a new article and associate it with the category article = Article.new(title: \"New Article\") article.content_categories << category article.save","title":"ContentCategory"},{"location":"models/#dataimport","text":"The DataImport model represents an import of data from a file (e.g. a spreadsheet) in the application. It has the following attributes: id : a unique identifier for the data import, stored as a bigint file : a string representing the file that was imported, stored as a file on the filesystem status : a string representing the status of the data import, with possible values of \"new\", \"running\", \"finished\", and \"failed\" log : a text field that stores log messages for the data import finished_at : a timestamp for when the data import finished created_at : a timestamp for when the data import was created updated_at : a timestamp for when the data import was last updated options : a JSONB field that stores options for the data import, including whether to import categories, questions, locking conditions, and visibility conditions The DataImport model has the following relationships: mount_uploader :file, FileUploader : indicates that the file attribute is a file that is managed by the FileUploader uploader. It has the following custom methods: filename : returns the filename of the imported file as a string. import_all : performs the data import, updating the status of the data import to \"running\" and setting it to \"finished\" or \"failed\" upon completion. This method also broadcasts the status of the data import to a channel on the Action Cable server. import_categories : imports categories from the data import file. import_questions : imports questions from the data import file. update_visibility_conditions : updates visibility conditions for questions in the data import file. update_locking_conditions : updates locking conditions for questions in the data import file. categories_spreadsheet : returns a Spreadsheet object for the categories sheet in the data import file. questions_spreadsheet : returns a Spreadsheet object for the questions sheet in the data import file. visibility_conditions_spreadsheet : returns a Spreadsheet object for the visibility conditions sheet in the data import file. locking_conditions_spreadsheet : returns a Spreadsheet object for the locking conditions sheet in the data import file. Here is an example of how the DataImport model could be used: Create a new data import with a file and options data_import = DataImport.new(file: params[:file], options: { categories: true, questions: true }) Save the data import and perform the import if data_import.save data_import.import_all end Find all data imports ordered by the most recently created data_imports = DataImport.all","title":"DataImport"},{"location":"models/#device","text":"The Device model represents a device that a user has used to sign in to the application. It has the following attributes: id : a unique identifier for the device, stored as a bigint user_id : a foreign key for the user associated with the device platform : a string representing the platform of the device (e.g. \"ios\" or \"android\") token : a string representing a unique token for the device created_at : a timestamp for when the device was created updated_at : a timestamp for when the device was last updated It has the following relationships: belongs_to :user : indicates that each device belongs to a single user. It has the following custom methods: ios? : returns true if the platform of the device is \"ios\", false otherwise. android?: returns true if the platform of the device is \"android\", false otherwise. Here is an example of how the Device model could be used: Find a device by its token device = Device.find_by(token: params[:token]) Check if the device is an iOS device if device.ios? # Do something end Create a new device for a user device = Device.new(user: current_user, platform: params[:platform], token: params[:token]) Save the device device.save","title":"Device"},{"location":"models/#feed","text":"The Feed model is a serializable model that represents a feed of content for a user. It has the following attributes: articles : an array of articles to be included in the feed interactions : an array of interactions to be included in the feed category_updates : an array of category updates to be included in the feed videos : an array of videos to be included in the feed It does not have any relationships or custom methods. Here is an example of how the Feed model could be used: Initialize a new feed with arrays of articles, interactions, category updates, and videos feed = Feed.new(articles: articles, interactions: interactions, category_updates: category_updates, videos: videos) Render the feed as JSON using a serializer render json: feed","title":"Feed"},{"location":"models/#ignore","text":"The Ignore model represents a relationship between a user and a category where the user has indicated that they do not want to receive notifications for updates to the category. It has the following attributes: id : a unique identifier for the ignore relationship, stored as a bigint user_id : a foreign key for the user associated with the ignore relationship category_id : a foreign key for the category associated with the ignore relationship created_at : a timestamp for when the ignore relationship was created updated_at : a timestamp for when the ignore relationship was last updated It has the following relationships: belongs_to :user : indicates that each ignore relationship belongs to a single user. belongs_to :category : indicates that each ignore relationship belongs to a single category. It does not have any custom methods. Here is an example of how the Ignore model could be used: Create a new ignore relationship between a user and a category ignore = Ignore.new(user: current_user, category: category) Save the ignore relationship ignore.save Find all the categories that a user is ignoring ignored_categories = Ignore.where(user: current_user).includes(:category)","title":"Ignore"},{"location":"models/#interaction","text":"The Interaction model represents a user interaction with a staff member, branch, or category. These interactions can be of different types, such as a recommendation or booking a taxi. Attributes: id : a unique identifier for the interaction user_id : the ID of the user who is interacting staff_member_id : the ID of the staff member involved in the interaction branch_id : the ID of the branch involved in the interaction category_id : the ID of the category involved in the interaction description : a description of the interaction created_at : the date and time that the interaction was created updated_at : the date and time that the interaction was last updated type : the type of interaction Relationships: belongs_to :user : the interaction belongs to a user belongs_to :staff_member : the interaction may involve a staff member belongs_to :branch : the interaction may involve a branch belongs_to :category : the interaction may involve a category Custom methods: mood? : returns a boolean indicating whether the interaction is a mood type partner_type? : returns a boolean indicating whether the interaction is a partner type (i.e. a type that involves a staff member or branch) Examples of usage: Retrieving a list of interactions for a particular user: Interaction.where(user_id: user.id) Retrieving a list of mood interactions for today: Interaction.where(type: 'mood').for_today","title":"Interaction"},{"location":"models/#memberrequestmessage","text":"The MemberRequestMessage model represents a message sent within a MemberRequest conversation between a staff member and a user. Attributes: id (integer) : The unique identifier for the message. body (text) : The content of the message. status (string) : The current status of the message, which can be pending, sent, or read. member_request_id (integer) : The identifier for the MemberRequest conversation to which the message belongs. messageable_id (integer) : The identifier for the user or staff member who sent the message. messageable_type (string) : The type of the sender, either User or StaffMember. created_at (datetime) : The timestamp when the message was created. updated_at (datetime) : The timestamp when the message was last updated. Relationships: belongs_to member_request : The MemberRequest conversation to which the message belongs. belongs_to messageable (polymorphic) : The user or staff member who sent the message. Custom methods: mark_as_read : Changes the status attribute to read. mark_as_unread : Changes the status attribute to pending. mark_as_sent : Changes the status attribute to sent. read? : Returns a boolean indicating whether the status attribute is read. Examples of usage: Create a new message: mr = MemberRequest.first message = MemberRequestMessage.new(body: 'Hello, how are you doing?', member_request: mr, messageable: staff_member) message.save Mark a message as read: message = MemberRequestMessage.first message.mark_as_read! Check if a message has been read: message = MemberRequestMessage.first message.read? Get all unread messages sent by staff members: MemberRequestMessage.from_staff_member.unread","title":"MemberRequestMessage"},{"location":"models/#memberrequesttypeassignment","text":"The MemberRequestTypeAssignment model represents a many-to-many relationship between Role and MemberRequestType models. It allows the assignment of one or more roles to a member request type, indicating which staff members are responsible for handling member requests of that type. Attributes: id (integer) : the primary key for the model. role_id (integer) : the foreign key for the Role model, indicating the role being assigned to the member request type. member_request_type_id (integer) : the foreign key for the MemberRequestType model, indicating the member request type being assigned to the role. created_at (datetime) : the timestamp for when the record was created. updated_at (datetime) : the timestamp for when the record was last updated. Relationships: belongs_to : the MemberRequestTypeAssignment model belongs to both the Role and MemberRequestType models. Custom methods: None. Examples of usage: Assign the 'customer_service' role to the 'booking' member request type member_request_type = MemberRequestType.find_by(name: 'booking') role = Role.find_by(name: 'customer_service') assignment = MemberRequestTypeAssignment.create(member_request_type: member_request_type, role: role) Get the member request types assigned to the 'customer_service' role role = Role.find_by(name: 'customer_service') member_request_types = role.member_request_types","title":"MemberRequestTypeAssignment"},{"location":"models/#memberrequesttype","text":"The MemberRequestType model represents a type of request that can be made by a member (user) to staff members in an organisation. Attributes: id : a unique identifier for the request type (integer, primary key) name : the name of the request type (string) business_unit_id : the unique identifier of the business unit to which the request type belongs (integer) created_at : the date and time at which the request type was created (datetime) updated_at : the date and time at which the request type was last updated (datetime) archived_at : the date and time at which the request type was archived (datetime) Relationships: business_unit : a belongs-to relationship with the BusinessUnit model. A request type belongs to a single business unit. organisation : a has-one-through relationship with the Organisation model. A request type has a single organisation through its business unit. member_request_type_assignments : a has-many relationship with the MemberRequestTypeAssignment model. A request type has many type assignments. roles : a has-many-through relationship with the Role model. A request type has many roles through its type assignments. staff_members : a has-many-through relationship with the StaffMember model. A request type has many staff members through its roles. Custom methods: acts_as_paranoid : this is a method provided by the ActsAsParanoid gem which allows the request type to be \"soft deleted\" by setting the archived_at attribute to the current date and time. This allows the request type to be restored if necessary. Examples of usage: Creating a new request type: request_type = MemberRequestType.new(name: 'Booking assistance') request_type.business_unit = BusinessUnit.first request_type.save","title":"MemberRequestType"},{"location":"models/#memberrequest","text":"Description: This model represents a request made by a member (user) to the staff of a branch. It has a type (e.g. booking, service request, etc.) and a status (open, pending, closed). The request can be composed of multiple messages exchanged between the member and the staff. Attributes: id : a unique identifier for the request (integer, primary key) user_id : the id of the member who made the request (integer, foreign key to the users table) branch_id : the id of the branch where the request was made (integer, foreign key to the branches table) member_request_type_id: the id of the type of request (integer, foreign key to the member_request_types table) status : the current status of the request (string, can be \"open\", \"pending\", or \"closed\") created_at : the timestamp for when the request was created (datetime) updated_at : the timestamp for when the request was last updated (datetime) last_message_sent_at : the timestamp for when the last message was sent for this request (datetime) Relationships: belongs_to :user belongs_to :branch belongs_to :member_request_type has_many :member_request_messages, dependent: :destroy Custom methods: mark_as_unread : marks the last message from the member as unread. Examples of usage: Create a new member request: request = MemberRequest.new(user_id: 1, branch_id: 2, member_request_type_id: 3, status: \"open\") request.member_request_messages.build(body: \"Hi, I would like to book a table for two on Friday at 7pm.\", messageable_type: \"User\") request.save Find all open member requests for a specific branch: requests = MemberRequest.for_branch(2).in_status(\"open\") Find all member requests for a specific member: requests = MemberRequest.for_member(1) Find all member requests with a specific message: requests = MemberRequest.with_message(5)","title":"MemberRequest"},{"location":"models/#notification","text":"The Notification model represents a notification that can be sent to a user. It can be associated with a specific object, such as a Branch or MemberRequestMessage, through a polymorphic association. Attributes: user_id : The ID of the user who will receive the notification. type : The type of notification, represented as a string. response : A JSONb field that can store a response from the user to the notification. object_type : The type of object that the notification is associated with, stored as a string. object_id : The ID of the object that the notification is associated with. created_at : The timestamp when the notification was created. updated_at : The timestamp when the notification was last updated. read_at : The timestamp when the notification was marked as read by the user. responded_at : The timestamp when the user responded to the notification. Relationships: belongs_to :user : The user who will receive the notification. belongs_to :object, polymorphic: true: The object that the notification is associated with. Custom methods: human_type : Returns the type of the notification in a human-readable format (e.g. \"new_message\" for Notification::NewMessage). mark_as_read : Marks the notification as read by updating the read_at attribute. self.mark_all_read: Marks all notifications as read for the current user by updating the read_at attribute. name : Returns the name of the object that the notification is associated with, or the name of the branch if the object is a MemberRequestMessage. Examples of usage: Create a new notification notification = Notification::NewMessage.create!(user: user, object: member_request_message) Mark a notification as read notification.mark_as_read Mark all notifications as read for a user Notification.where(user: user).mark_all_read Find unread notifications for a user unread_notifications = Notification.where(user: user).unread","title":"Notification"},{"location":"models/#organisation","text":"The Organisation model represents a company or organization in the system. It has the following attributes: id : a unique identifier for the organisation, stored as a big integer and generated automatically by the database. name : a string containing the name of the organization. This attribute is required. about : a text field containing information about the organization. archived_at : a datetime field containing the date and time at which the organization was archived. If the organization has not been archived, this field is nil. The Organisation model has the following relationships: address : a one-to-one relationship with the Address model, representing the address of the organization. photo : a one-to-one relationship with the Photo model, representing a photo of the organization. staff_members : a one-to-many relationship with the StaffMember model, representing the staff members of the organization. branch_managers : a one-to-many relationship with the BranchManager model, representing the branch managers of the organization. admins : a one-to-many relationship with the Admin model, representing the administrators of the organization. business_units : a one-to-many relationship with the BusinessUnit model, representing the business units within the organization. branches : a many-to-many relationship with the Branch model, through the BusinessUnit model, representing the branches that belong to the organization. roles : a many-to-many relationship with the Role model, through the BusinessUnit model, representing the roles that exist within the organization. videos : a one-to-many relationship with the Video model, representing the videos associated with the organization. The Organisation model has the following custom methods: reject_photo?(attributes) : a private method used to determine whether a photo should be rejected when creating or updating an organization. It returns true if the image attribute of the attributes parameter is blank, and false otherwise. An example of usage for the Organisation model could be: Create a new organization org = Organisation.new(name: \"My Organization\")","title":"Organisation"},{"location":"models/#partnercategory","text":"The PartnerCategory model represents categories for partners in the system. A partner can belong to multiple categories and each category can have multiple partners. Attributes: id : a unique identifier for the partner category (integer, primary key) title : the name of the partner category (string) position : the position of the partner category in a list (integer) created_at : the timestamp when the partner category was created (datetime) updated_at : the timestamp when the partner category was last updated (datetime) Relationships: branch_categorisations : a has-many relationship with the BranchCategorisation model, representing the categories a branch belongs to (a branch can belong to multiple categories and a category can have multiple branches) branches : a has-many-through relationship with the Branch model, representing the branches that belong to the partner category Custom methods: to_s : returns the title of the partner category as a string Examples of usage: Creating a new partner category: category = PartnerCategory.new(title: 'Technology') category.save Adding a branch to a partner category: category = PartnerCategory.find(1) branch = Branch.find(2) category.branches << branch Displaying the title of a partner category: category = PartnerCategory.find(1) puts category.to_s # outputs the title of the partner category","title":"PartnerCategory"},{"location":"models/#personality","text":"The Personality model represents the personality of a user. It is composed of three sub-models: Lifestyle, Food, and Wine. Attributes: None. Relationships: The Personality model has three sub-models: Lifestyle, Food, and Wine. Each of these sub-models has a one-to-one relationship with the Personality model. Custom Methods: initialize(user): Initializes a new instance of the Personality model with a given user. result: Returns a hash containing the results of the Lifestyle, Food, and Wine sub-models. Examples of usage: user = User.find(1) personality = Personality.new(user) results = personality.result","title":"Personality"},{"location":"models/#photo","text":"The Photo model represents a photo that belongs to an owner object through polymorphic association. It has the following attributes: id : a unique integer identifier for the photo, generated by the database owner_id : an integer representing the ID of the owner object that this photo belongs to owner_type : a string representing the type of the owner object that this photo belongs to (e.g. \"Branch\", \"User\") image : a string representing the location of the photo file on the filesystem or in a file storage service (e.g. Amazon S3) created_at : a datetime representing the time when the photo was created updated_at : a datetime representing the time when the photo was last updated photo_type : a string representing the type of the photo (e.g. \"logo\", \"cover photo\") The Photo model also has the following relationships: belongs_to :owner, polymorphic: true, touch: true : this indicates that a photo belongs to an owner object, and the owner object can be any type of object (specified by the owner_type attribute). The touch: true option tells Rails to update the updated_at timestamp of the owner object when the photo is updated. The Photo model has the following custom methods: safe_recreate_versions! : this method is used to recreate the different versions (resized versions) of the photo file. It first retrieves the original file from the cache, then recreates the versions and saves the changes to the model. preview_data : this method returns a base64-encoded version of the photo file's preview version, suitable for use in a data URI. It uses the Rails.cache to store the result and avoid recalculating it every time it is called. An example of usage for the Photo model might be: # Create a new photo for a branch object branch = Branch.first photo = Photo.new(owner: branch, image: params[:image]) if photo.save","title":"Photo"},{"location":"models/#preferencegroup","text":"The PreferenceGroup model represents a group of questions that are related to each other. It has the following attributes: id: a unique identifier for the preference group (integer, primary key). title: a string representing the title of the preference group. question_ids: an array of integers representing the ids of the questions that belong to the preference group. created_at: a datetime representing when the preference group was created. updated_at: a datetime representing the last time the preference group was updated. It has the following relationships: has_many :role_preference_group_assignments: this indicates that a preference group can have many assignments to roles. It has the following custom methods: question_ids=: this method is used to set the question_ids attribute, and it removes any blank values from the array of new ids before saving them. questions: this method returns a collection of Question objects that belong to the preference group, based on the question_ids attribute. An example of usage could be: # Find the preference group with id 1 pg = PreferenceGroup.find(1) # Display the title of the preference group puts pg.title # => \"Food Preferences\" # Display the questions that belong to the preference group pg.questions.each do |question| puts question.text end # => \"What is your favourite type of cuisine?\" # => \"Do you have any dietary restrictions?\" # => \"Do you have any food allergies?\"","title":"PreferenceGroup"},{"location":"models/#profilerequest","text":"The ProfileRequest model represents a request made by a user for access to a branch's profile page. It has the following attributes: id : a unique identifier for the request branch_id : the ID of the branch that the user is requesting access to user_id : the ID of the user making the request created_at : a timestamp for when the request was created updated_at : a timestamp for when the request was last updated It has the following relationships: belongs_to :branch: indicates that each ProfileRequest belongs to a single Branch belongs_to :user: indicates that each ProfileRequest belongs to a single User It does not have any custom methods or examples of usage.","title":"ProfileRequest"},{"location":"models/#question","text":"The Question model represents a question that can be asked to a user. It has various attributes such as title, kind, and locking_conditions that define the question and its behavior. The Question model also has relationships with other models such as Category, Photo, Answer, and UserAnswer. Attributes id (bigint, primary key) : a unique identifier for the question. category_id (integer) : the id of the category that the question belongs to. title (citext) : the title of the question. kind (string) : the type of question, which can be one of the following values: 'option', 'unordered_list', 'ordered_list', 'boolean', 'number', 'number_range', 'temperature', 'temperature_range', 'text', 'time', 'time_range'. created_at (datetime) : the timestamp when the question was created. updated_at (datetime) : the timestamp when the question was last updated. locking_conditions (jsonb) : a JSON object that defines the conditions under which the question should be locked. intro (boolean) : a flag indicating whether the question is an introduction question. allows_note (boolean) : a flag indicating whether the question allows the user to add a note. note_title (string) : the title of the note that the user can add to the question. processed_at (datetime) : the timestamp when the question was processed. text_style (string) : the style of the text for the question. Can be one of the following values: 'dark', 'light', 'dark-gold', 'light-gold'. blur_background (boolean) : a flag indicating whether the background should be blurred for the question. background_overlay (boolean): a flag indicating whether there should be an overlay on the background for the question. Relationships category (belongs_to) : the category that the question belongs to. photo (has_one) : the photo that is associated with the question. answers (has_many) : the answers that are available for the question. user_answers (has_many) : the answers that have been given by users for the question. Custom Methods enumerable_kind? : returns a boolean indicating whether the question is one of the following types: 'option', 'unordered_list', 'ordered_list', 'boolean', 'number', 'number_range', 'temperature', 'temperature_range'. diverse_kind? : returns a boolean indicating whether the question is one of the following types: 'text', 'time', 'time_range'. Examples of Usage Here are some examples of how the Question model can be used: To create a new question: question = Question.new(title: 'What is your favorite color?', kind: 'option') question.save To retrieve all the questions in a particular category: category = Category.find_by(name: 'Personal') questions = Question.in_category(category)","title":"Question"},{"location":"models/#rating","text":"The Rating model represents a rating given by a user for a particular branch. It has various attributes such as value that define the rating, and relationships with other models such as Branch and User. Attributes id (bigint, primary key) : a unique identifier for the rating. branch_id (bigint) : the id of the branch that the rating is for. user_id (bigint) : the id of the user who gave the rating. value (integer) : the value of the rating, which must be an integer between 1 and 5. created_at (datetime) : the timestamp when the rating was created. updated_at (datetime) : the timestamp when the rating was last updated. Relationships branch (belongs_to) : the branch that the rating is for. user (belongs_to) : the user who gave the rating. Custom Methods There are no custom methods defined in the Rating model. Examples of Usage Here are some examples of how the Rating model can be used: To create a new rating: branch = Branch.find_by(name: 'My Branch') user = User.find_by(email: 'user@example.com') rating = Rating.new(branch: branch, user: user, value: 4) rating.save To retrieve all the ratings for a particular branch: branch = Branch.find_by(name: 'My Branch') ratings = Rating.where(branch: branch) To retrieve the average rating value for a particular branch: branch = Branch.find_by(name: 'My Branch') average_rating = Rating.where(branch: branch).average(:value)","title":"Rating"},{"location":"models/#release","text":"The Release model represents a release of data. It has various attributes such as file and status that define the release, and a relationship with the ReleaseFileUploader uploader. Attributes id (bigint, primary key) : a unique identifier for the release. file (string) : the file that contains the data for the release. status (string) : the status of the release, which can be one of the following values: 'queued', 'processing', 'complete'. created_at (datetime) : the timestamp when the release was created. updated_at (datetime) : the timestamp when the release was last updated. Relationships file (mount_uploader) : the ReleaseFileUploader uploader that is used to handle the file for the release. Custom Methods latest : returns the latest complete release. latest_timestamp : returns the timestamp of the latest complete release. latest_id : returns the id of the latest complete release. latest? : returns a boolean indicating whether the release is the latest complete release. queued? : returns a boolean indicating whether the release is in the 'queued' status. processing? : returns a boolean indicating whether the release is in the 'processing' status. complete? : returns a boolean indicating whether the release is in the 'complete' status. process! : sets the status of the release to 'processing' and broadcasts the status change. complete! : sets the status of the release to 'complete' and broadcasts the status change. Examples of Usage Here are some examples of how the Release model can be used: To create a new release: release = Release.new(file: '/path/to/file.csv') release.save To retrieve the latest complete release: latest_release = Release.latest To retrieve the timestamp of the latest complete release: latest_timestamp = Release.latest_timestamp To check if a particular release is the latest complete release: release = Release.find(1) release.latest? To set the status of a release to 'processing': release = Release.find(1) release.process! To set the status of a release to 'complete': release = Release.find(1) release.complete!","title":"Release"},{"location":"models/#roleassignment","text":"The RoleAssignment model represents a role that has been assigned to a staff member. It has various attributes such as role_id and staff_member_id that define the assignment, and relationships with other models such as Role and StaffMember. Attributes id (bigint, primary key) : a unique identifier for the role assignment. role_id (bigint) : the id of the role that has been assigned. staff_member_id (bigint) : the id of the staff member who has been assigned the role. archived_at (datetime) : the timestamp when the role assignment was archived. created_at (datetime) : the timestamp when the role assignment was created. updated_at (datetime) : the timestamp when the role assignment was last updated. Relationships role (belongs_to) : the role that has been assigned. staff_member (belongs_to) : the staff member who has been assigned the role. Custom Methods There are no custom methods defined in the RoleAssignment model. Examples of Usage Here are some examples of how the RoleAssignment model can be used: To create a new role assignment: role = Role.find_by(name: 'Manager') staff_member = StaffMember.find_by(email: 'staff@example.com') role_assignment = RoleAssignment.new(role: role, staff_member: staff_member) role_assignment.save To retrieve all the role assignments for a particular role: role = Role.find_by(name: 'Manager') role_assignments = RoleAssignment.where(role: role) To retrieve all the role assignments for a particular staff member: staff_member = StaffMember.find_by(email: 'staff@example.com') role_assignments = RoleAssignment.where(staff_member: staff_member)","title":"RoleAssignment"},{"location":"models/#rolepreferencegroupassignment","text":"The RolePreferenceGroupAssignment model represents the assignment of a preference group to a role. It has various attributes such as role_id, preference_group_id, and position that define the assignment, and relationships with other models such as Role and PreferenceGroup. Attributes id (bigint, primary key) : a unique identifier for the role preference group assignment. role_id (bigint) : the id of the role to which the preference group has been assigned. preference_group_id (bigint) : the id of the preference group that has been assigned to the role. position (integer) : the position of the preference group within the role. column (string) : the column in which the preference group should be displayed (either 'left' or 'right'). created_at (datetime) : the timestamp when the role preference group assignment was created. updated_at (datetime) : the timestamp when the role preference group assignment was last updated. Relationships role (belongs_to) : the role to which the preference group has been assigned. preference_group (belongs_to) : the preference group that has been assigned to the role. **Custom Methods left : a scope that returns all the role preference group assignments with the column attribute set to 'left'. right : a scope that returns all the role preference group assignments with the column attribute set to 'right'. Examples of Usage Here are some examples of how the RolePreferenceGroupAssignment model can be used: To create a new role preference group assignment: role = Role.find_by(name: 'Manager') preference_group = PreferenceGroup.find_by(name: 'General') role_preference_group_assignment = RolePreferenceGroupAssignment.new( role: role, preference_group: preference_group, position: 1, column: 'left' ) role_preference_group","title":"RolePreferenceGroupAssignment"},{"location":"models/#role","text":"The Role model represents a role within an organization. It has various attributes such as name, business_unit_id, and interactions that define the role, and relationships with other models such as BusinessUnit, StaffMember, and MemberRequestType. Attributes id (bigint, primary key) :a unique identifier for the role. name (string) :the name of the role. created_at (datetime) :the timestamp when the role was created. updated_at (datetime) :the timestamp when the role was last updated. archived_at (datetime) :the timestamp when the role was archived (if applicable). business_unit_id (bigint) :the id of the business unit to which the role belongs. top_questions_data (jsonb) :a JSON object containing data about the top questions for the role. interactions (string, array) :an array of strings representing the interactions that are allowed for the role. Relationships business_unit (belongs_to) :the business unit to which the role belongs. organisation (has_one, through: business_unit) :the organization to which the role belongs. role_assignments (has_many) :the assignments of staff members to the role. staff_members (has_many, through: role_assignments) :the staff members who have been assigned to the role. member_request_type_assignments (has_many) :the assignments of member request types to the role. member_request_types (has_many, through: member_request_type_assignments) :the member request types that have been assigned to the role. Custom Methods **top_questions_data=: a setter method that sets the top_questions_data attribute and converts the values to integers. top_question(position) :a method that returns the id of the top question at the specified position. top_question_ids : a method that returns an array of ids of the top questions for the role. top_questions : a method that returns the top questions for the role as a collection of Question objects.","title":"Role"},{"location":"models/#share","text":"The Share model represents a user's request to share a Branch with another user. It has several attributes: branch_id : an integer that represents the Branch being shared user_id : an integer that represents the User making the request status : a string that represents the current state of the share request (e.g. requested, authorised, revoked, denied) via : a string that represents how the request was made (e.g. web, email, sms) requested_at, authorised_at, denied_at, revoked_at : timestamps for when the respective actions were taken It has several relationships: belongs_to :branch : a Share belongs to a Branch belongs_to :user : a Share belongs to a User It has several custom methods: request, authorise, deny, revoke : methods that update the status attribute and perform other actions depending on the transition (e.g. sending notifications, scheduling a reminder job). These methods are implemented using the aasm gem for state management. revoke_all : a class method that updates the status attribute of all authorised shares to revoked create_request_notification, authorise_notifications, deny_notifications, update_notifications, schedule_reminder, notify_graphql_share_change : private methods that perform actions such as creating notifications, scheduling jobs, and triggering GraphQL subscriptions. An example of usage: share = Share.new(branch_id: 1, user_id: 2) share.request This will create a new Share object with a status of requested, and trigger the create_request_notification method to send a notification to the user.","title":"Share"},{"location":"models/#staffassignment","text":"The StaffAssignment model represents an association between a staff member and a target object. The target object can be any object that has an id column in the database and is polymorphic (can be associated with multiple types of objects). Attributes id : A big integer primary key. staff_member_id : An integer that represents the id of the associated staff member. target_type : A string that represents the class name of the associated target object. target_id : An integer that represents the id of the associated target object. created_at : A datetime that represents the time at which the staff assignment was created. updated_at : A datetime that represents the time at which the staff assignment was last updated. archived_at : A datetime that represents the time at which the staff assignment was archived. Relationships belongs_to :staff_member: The staff assignment belongs to a staff member. belongs_to :target, polymorphic: true: The staff assignment belongs to a target object that is polymorphic. Custom Methods None. Examples of Usage Suppose we have a Project model and a StaffMember model and we want to create a staff assignment that associates a staff member with a project. We could do so as follows: project = Project.find(1) staff_member = StaffMember.find(2) staff_assignment = StaffAssignment.new( staff_member: staff_member, target: project ) if staff_assignment.save puts \"Staff assignment created successfully!\" else puts \"Error creating staff assignment: #{staff_assignment.errors.full_messages.join(', ')}\" end","title":"StaffAssignment"},{"location":"models/#topquestion","text":"The TopQuestion model is a subclass of the Question model, which represents a question that can be asked to users. It has the following attributes: id : a primary key, an integer, that uniquely identifies the question. category_id : an integer that represents the category to which the question belongs. title : a string that represents the title of the question. kind : a string that represents the type of question, such as multiple choice or true/false. created_at : a datetime that represents the time when the question was created. updated_at : a datetime that represents the time when the question was last updated. locking_conditions : a jsonb field that represents the conditions under which the question is locked. intro : a boolean field that represents whether the question is an introduction question or not. allows_note : a boolean field that represents whether the question allows users to add a note or not. note_title : a string that represents the title of the note that users can add. processed_at : a datetime that represents the time when the question was processed. text_style : a string that represents the style of the text used in the question. blur_background : a boolean field that represents whether the background of the question should be blurred or not. background_overlay : a boolean field that represents whether an overlay should be applied to the background of the question or not. The TopQuestion model has the following custom method: answers: returns a relation that represents the answers given by the user specified by the user_id class attribute to the question. An example of usage of the TopQuestion model is as follows: # Set the user ID for the current thread TopQuestion.user_id = current_user.id # Find the top question for the user top_question = TopQuestion.find(params[:id]) # Get the answers given by the user to the top question answers = top_question.answers","title":"TopQuestion"},{"location":"models/#useranswer","text":"The UserAnswer model represents an answer to a question by a user. It has the following attributes: id : a unique identifier for the answer, stored as a bigint user_id : the identifier of the user who provided the answer, stored as an integer question_id : the identifier of the question being answered, stored as an integer created_at : a timestamp for when the answer was created, stored as a datetime updated_at : a timestamp for when the answer was last updated, stored as a datetime note : a text field for storing a note or explanation related to the answer values : a text field for storing the actual answer, which can be serialized into different data types depending on the type of the question It has the following relationships: belongs_to :question : each answer belongs to a single question belongs_to :user : each answer is provided by a single user It has the following custom methods: Question::KINDS.each do |kind_name| define_method(\"#{kind_name}?\") { kind == kind_name } end : this generates methods for each type of question, such as ordered_list?, unordered_list?, text?, etc., which return a boolean indicating whether the answer's question has the corresponding type. values_format : a private method that validates the format of the values attribute based on the type of the question. If the format is invalid, it adds an error to the values attribute. Here are some examples of how the UserAnswer model could be used: # Create a new user answer answer = UserAnswer.new(user_id: 1, question_id: 2, values: 'This is my answer') answer.save # Find a user answer by its id answer = UserAnswer.find(5) # Update an existing user answer answer.values = 'This is my updated answer' answer.save # Check if a user answer's question is of a certain type answer.text? # returns true if the question is a text type, false otherwise # Access the user and question associated with a user answer user = answer.user question = answer.question","title":"UserAnswer"},{"location":"models/#videocontentcategory","text":"VideoContentCategory is a model in a Ruby on Rails application that represents the many-to-many relationship between videos and content categories. It has the following attributes: id : a bigint that serves as the primary key for the model and is automatically generated by the database. video_id : a bigint that represents the foreign key for the video model. content_category_id : a bigint that represents the foreign key for the content_category model. created_at : a datetime that represents when the record was created. updated_at : a datetime that represents when the record was last updated. It has the following relationships: belongs_to :video : This indicates that each instance of the VideoContentCategory model belongs to a single video model. belongs_to :content_category : This indicates that each instance of the VideoContentCategory model belongs to a single content_category model. It has the following custom methods: None. Here is an example of how the VideoContentCategory model might be used: # Create a new video content category record that associates a video with a content category video_content_category = VideoContentCategory.new(video_id: 1, content_category_id: 2) # Save the video content category record to the database video_content_category.save","title":"VideoContentCategory"},{"location":"models/#video","text":"Video is a model in a Ruby on Rails application that represents a video that can be published and viewed by users. It has the following attributes: id : a bigint that serves as the primary key for the model and is automatically generated by the database. name : a string that represents the name of the video. description : a text field that provides a description of the video. url : a string that represents the URL of the video. published_at : a datetime that represents when the video was published. organisation_id : a bigint that represents the foreign key for the organisation model. vista_admin_id : a bigint that represents the foreign key for the vista_admin model. notification_job_id : an integer that represents the ID of a notification job related to the video. created_at : a datetime that represents when the record was created. updated_at : a datetime that represents when the record was last updated. published : a boolean that indicates whether the video has been published or not. archived_at : a datetime that represents when the video was archived. platform_id : a string that represents the ID of the video on a platform like Vimeo. It has the following relationships: has_many :video_content_categories, dependent: :destroy : This indicates that a video can have many video content categories and that these should be destroyed when the video is destroyed. has_many :content_categories, through: :video_content_categories : This indicates that a video can have many content categories through its video content categories. belongs_to :vista_admin : This indicates that a video belongs to a single vista admin. belongs_to :organisation, optional : true: This indicates that a video can optionally belong to an organisation. It has the following custom methods: check_published_status : This method is called before the video is saved and checks if the published status has changed. If it has and the video is being published, it sets the published_at attribute to the current time. extract_platform_id : This method is called before the video is saved and extracts the ID of the video on a platform like Vimeo from the url attribute. It also has the following scope methods: in_organisation : This scope filters videos by the given organisation. newest_first : This scope orders videos by their created_at attribute in descending order. for_vista : This scope filters videos that do not belong to an organisation. search : This scope filters videos by a search term that is matched against the name and description attributes. published : This scope filters published videos. Here is an example of how the Video model might be used: Copy code # Find all published videos in an organisation videos = Video.in_organisation(1).published # Find the most recently created video newest_video = Video.newest_first.first # Search for videos with the term 'cat' in their name or description cat_videos = Video.search('cat')","title":"Video"},{"location":"models/#vistaadmin","text":"VistaAdmin is a model in a Ruby on Rails application that represents an administrator for the Vista platform. It has the following attributes: id : a bigint that serves as the primary key for the model and is automatically generated by the database. first_name : a string that represents the first name of the administrator. last_name : a string that represents the last name of the administrator. email : a string that represents the email address of the administrator. encrypted_password : a string that represents the encrypted password of the administrator. reset_password_token : a string that represents a token used for resetting the password. reset_password_sent_at : a datetime that represents when the reset password token was sent. remember_created_at : a datetime that represents when the administrator chose to be remembered. sign_in_count : an integer that represents the number of times the administrator has signed in. current_sign_in_at : a datetime that represents the current sign in time of the administrator. last_sign_in_at : a datetime that represents the last sign in time of the administrator. current_sign_in_ip : an inet field that represents the current sign in IP address of the administrator. last_sign_in_ip : an inet field that represents the last sign in IP address of the administrator. confirmation_token : a string that represents a confirmation token for the administrator. confirmed_at : a datetime that represents when the administrator was confirmed. confirmation_sent_at : a datetime that represents when the confirmation token was sent. unconfirmed_email : a string that represents the unconfirmed email address of the administrator. failed_attempts : an integer that represents the number of failed attempts by the administrator. unlock_token : a string that represents a token used to unlock the administrator's account. locked_at : a datetime that represents when the administrator's account was locked. created_at : a datetime that represents when the record was created. updated_at : a datetime that represents when the record was last updated. It has the following relationships: has_many :videos : This indicates that a VistaAdmin can have many videos. It has the following custom methods: attempt_set_password : This method allows the administrator to set a new password without knowing the current password. no_password? : This method returns a boolean indicating whether the administrator has a password set. only_if_unconfirmed : This method yields to a block if the administrator has not been confirmed. password_match? : This method returns a boolean indicating whether the entered password and password confirmation match. It also includes the Devise module for authentication and confirmation. Here is an example of how the VistaAdmin model might be used: # Find a VistaAdmin by email vista_admin = VistaAdmin.find_by(email: 'admin@example.com') # Check if the VistaAdmin's password is blank if vista_admin.no_password?","title":"VistaAdmin"},{"location":"models/concern/","text":"CacheWarmer The CacheWarmer module is a concern that can be included in a model. It defines a class method cache_warm_attributes, which can be used to specify a list of attributes of the model that should be cached. The concern also defines a private method warm_cache, which is an after_commit hook that runs the CacheWarmerJob with the current model instance as an argument. This job is responsible for warming the cache for the specified attributes of the model instance. Example usage: class User < ApplicationRecord include CacheWarmer cache_warm_attributes :first_name, :last_name, :email end In this example, the User model will have a cache warmed for its first_name, last_name, and email attributes after it is created or updated. CleanAttributes CleanAttributes is a Rails concern that defines a clean_attributes method and a before_validation callback that calls this method. The clean_attributes method expects a list of attribute names as arguments. The method is intended to be used to \"clean\" the values of these attributes by calling the squish method on them. The squish method removes excess white space from the beginning and end of a string and replaces any internal sequences of white space with a single space character. Attributes None. Relationships None. Custom methods clean_attributes(*attributes): This method defines a clean_attributes instance method that expects a list of attribute names as arguments. It also defines a before_validation callback that calls this method. The clean_attributes method iterates over the provided attribute names and calls the squish method on the value of each attribute. It then assigns the result back to the attribute. This method is intended to be used to \"clean\" the values of the provided attributes by removing excess white space and replacing internal sequences of white space with a single space character. Examples of usage In a model: class User < ApplicationRecord include CleanAttributes clean_attributes :first_name, :last_name, :email # ... end This will define a before_validation callback in the User model that calls the clean_attributes method before validation. The clean_attributes method will \"clean\" the values of the first_name, last_name, and email attributes by calling the squish method on them. EnforceNil The EnforceNil module is designed to be included in a Rails model and provides a enforce_nil class method which can be used to set specified attributes to nil before the model is saved to the database. Attributes that should be set to nil are passed as arguments to the enforce_nil method, and a before_save callback is defined to invoke the enforce_nil method before the model is saved. The enforce_nil method sets the specified attributes to nil if their current value is \"blank\", meaning it is nil, an empty string, or an empty array. Here's an example of how the EnforceNil module could be used in a model: class User < ApplicationRecord include EnforceNil enforce_nil :phone_number, :email end This would add a before_save callback to the User model which invokes the enforce_nil method. The phone_number and email attributes of the User model would be set to nil if they are blank when the model is saved to the database. HasContentCategories The HasContentCategories module is a concern that adds scopes and methods to a model that allows it to be associated with ContentCategory models. Attributes: The HasContentCategories module does not define any new attributes for the model it is included in. Relationships: The HasContentCategories module adds a has_and_belongs_to_many relationship with the ContentCategory model. This relationship is created through the ContentCategoriesModel join model. Custom methods: The HasContentCategories module defines the following custom methods: in_category(categories) : This scope returns all records that are associated with the ContentCategory records specified in the categories parameter. for_user(user) : This class method returns all records that are not associated with any ContentCategory records that are marked as hidden for the User specified in the user parameter. Examples of usage: Here is an example of how the HasContentCategories module could be used: class Article < ApplicationRecord include HasContentCategories # ... other code end # Find all articles that are associated with the 'News' and 'Entertainment' categories Article.in_category(['News', 'Entertainment']) # Find all articles that are not hidden for a specific user user = User.find(1) Article.for_user(user) HasPhoto The HasPhoto module defines a has_one relationship between a model and a Photo model, and allows the model to accept nested attributes for a Photo. Attributes The HasPhoto module does not define any new attributes for the model it is included in. Relationships The HasPhoto module defines a has_one relationship between a model and a Photo model. Custom methods The HasPhoto module defines a reject_photos? method that determines if a Photo should be rejected based on the presence of certain attributes. Examples of usage The HasPhoto module could be included in a StaffMember model to allow a StaffMember to have a Photo associated with it. It could be used like this: class StaffMember < ApplicationRecord include HasPhoto end HasPreferenceGroups The HasPreferenceGroups module is a module that can be included in a Ruby on Rails model to give the model the ability to have preference groups. Attributes: role_preference_group_assignments : a has-many association with the RolePreferenceGroupAssignment model. This attribute represents the preference group assignments that belong to the model instance. preference_groups : a has-many association with the PreferenceGroup model, through the role_preference_group_assignments attribute. This attribute represents the preference groups that belong to the model instance. Relationships: HasPreferenceGroups has a one-to-many relationship with the RolePreferenceGroupAssignment model through the role_preference_group_assignments attribute. HasPreferenceGroups has a one-to-many relationship with the PreferenceGroup model through the preference_groups attribute. Custom methods: preference_structure_left : returns an array of hashes representing the preference groups and their positions on the left side of the screen for the model instance. preference_structure_left= : accepts an array of hashes representing preference group data and assigns them to the model instance, setting their column to \"left\". preference_structure_right : returns an array of hashes representing the preference groups and their positions on the right side of the screen for the model instance. preference_structure_right= : accepts an array of hashes representing preference group data and assigns them to the model instance, setting their column to \"right\". preference_structure_json : returns a hash representing a preference group and its position. role_preference_group_assignments_attributes : accepts an array of hashes representing preference group data and returns a hash of attributes for use in mass assignment for the RolePreferenceGroupAssignment model. Examples of usage: class User < ApplicationRecord include HasPreferenceGroups end user = User PaperTrailUser The PaperTrailUser module is a concern that adds a custom method to a model. The paper_trail_actor method accepts a user_type argument and defines a actor method on the model. The actor method returns an instance of the user_type class with an id equal to the value of the whodunnit attribute of the model. If the whodunnit attribute is not present, the actor method returns nil. Attributes: whodunnit : an attribute of the model that holds the id of the user who performed an action that resulted in a change to the model Relationships: None Custom methods: paper_trail_actor : Accepts a user_type argument and defines the actor method on the model. actor : Returns an instance of the user_type class with an id equal to the value of the whodunnit attribute of the model. If the whodunnit attribute is not present, returns nil. Example of usage: class User < ApplicationRecord include PaperTrailUser paper_trail_actor :user end user = User.create(name: 'Bob') # => #<User id: 1, name: 'Bob', whodunnit: 1> VersionsTable The VersionsTable module is a Rails concern that allows you to specify the name of the table that should be used to store version records for a model. Attributes: None Relationships: None Custom methods: versions_table(versions_table_name): specifies the name of the table that should be used to store version records for the model Example of usage: class MyModel < ApplicationRecord include VersionsTable versions_table :my_model_versions end","title":"concerns"},{"location":"models/concern/#cachewarmer","text":"The CacheWarmer module is a concern that can be included in a model. It defines a class method cache_warm_attributes, which can be used to specify a list of attributes of the model that should be cached. The concern also defines a private method warm_cache, which is an after_commit hook that runs the CacheWarmerJob with the current model instance as an argument. This job is responsible for warming the cache for the specified attributes of the model instance. Example usage: class User < ApplicationRecord include CacheWarmer cache_warm_attributes :first_name, :last_name, :email end In this example, the User model will have a cache warmed for its first_name, last_name, and email attributes after it is created or updated.","title":"CacheWarmer"},{"location":"models/concern/#cleanattributes","text":"CleanAttributes is a Rails concern that defines a clean_attributes method and a before_validation callback that calls this method. The clean_attributes method expects a list of attribute names as arguments. The method is intended to be used to \"clean\" the values of these attributes by calling the squish method on them. The squish method removes excess white space from the beginning and end of a string and replaces any internal sequences of white space with a single space character. Attributes None. Relationships None. Custom methods clean_attributes(*attributes): This method defines a clean_attributes instance method that expects a list of attribute names as arguments. It also defines a before_validation callback that calls this method. The clean_attributes method iterates over the provided attribute names and calls the squish method on the value of each attribute. It then assigns the result back to the attribute. This method is intended to be used to \"clean\" the values of the provided attributes by removing excess white space and replacing internal sequences of white space with a single space character. Examples of usage In a model: class User < ApplicationRecord include CleanAttributes clean_attributes :first_name, :last_name, :email # ... end This will define a before_validation callback in the User model that calls the clean_attributes method before validation. The clean_attributes method will \"clean\" the values of the first_name, last_name, and email attributes by calling the squish method on them.","title":"CleanAttributes"},{"location":"models/concern/#enforcenil","text":"The EnforceNil module is designed to be included in a Rails model and provides a enforce_nil class method which can be used to set specified attributes to nil before the model is saved to the database. Attributes that should be set to nil are passed as arguments to the enforce_nil method, and a before_save callback is defined to invoke the enforce_nil method before the model is saved. The enforce_nil method sets the specified attributes to nil if their current value is \"blank\", meaning it is nil, an empty string, or an empty array. Here's an example of how the EnforceNil module could be used in a model: class User < ApplicationRecord include EnforceNil enforce_nil :phone_number, :email end This would add a before_save callback to the User model which invokes the enforce_nil method. The phone_number and email attributes of the User model would be set to nil if they are blank when the model is saved to the database.","title":"EnforceNil"},{"location":"models/concern/#hascontentcategories","text":"The HasContentCategories module is a concern that adds scopes and methods to a model that allows it to be associated with ContentCategory models. Attributes: The HasContentCategories module does not define any new attributes for the model it is included in. Relationships: The HasContentCategories module adds a has_and_belongs_to_many relationship with the ContentCategory model. This relationship is created through the ContentCategoriesModel join model. Custom methods: The HasContentCategories module defines the following custom methods: in_category(categories) : This scope returns all records that are associated with the ContentCategory records specified in the categories parameter. for_user(user) : This class method returns all records that are not associated with any ContentCategory records that are marked as hidden for the User specified in the user parameter. Examples of usage: Here is an example of how the HasContentCategories module could be used: class Article < ApplicationRecord include HasContentCategories # ... other code end # Find all articles that are associated with the 'News' and 'Entertainment' categories Article.in_category(['News', 'Entertainment']) # Find all articles that are not hidden for a specific user user = User.find(1) Article.for_user(user)","title":"HasContentCategories"},{"location":"models/concern/#hasphoto","text":"The HasPhoto module defines a has_one relationship between a model and a Photo model, and allows the model to accept nested attributes for a Photo. Attributes The HasPhoto module does not define any new attributes for the model it is included in. Relationships The HasPhoto module defines a has_one relationship between a model and a Photo model. Custom methods The HasPhoto module defines a reject_photos? method that determines if a Photo should be rejected based on the presence of certain attributes. Examples of usage The HasPhoto module could be included in a StaffMember model to allow a StaffMember to have a Photo associated with it. It could be used like this: class StaffMember < ApplicationRecord include HasPhoto end","title":"HasPhoto"},{"location":"models/concern/#haspreferencegroups","text":"The HasPreferenceGroups module is a module that can be included in a Ruby on Rails model to give the model the ability to have preference groups. Attributes: role_preference_group_assignments : a has-many association with the RolePreferenceGroupAssignment model. This attribute represents the preference group assignments that belong to the model instance. preference_groups : a has-many association with the PreferenceGroup model, through the role_preference_group_assignments attribute. This attribute represents the preference groups that belong to the model instance. Relationships: HasPreferenceGroups has a one-to-many relationship with the RolePreferenceGroupAssignment model through the role_preference_group_assignments attribute. HasPreferenceGroups has a one-to-many relationship with the PreferenceGroup model through the preference_groups attribute. Custom methods: preference_structure_left : returns an array of hashes representing the preference groups and their positions on the left side of the screen for the model instance. preference_structure_left= : accepts an array of hashes representing preference group data and assigns them to the model instance, setting their column to \"left\". preference_structure_right : returns an array of hashes representing the preference groups and their positions on the right side of the screen for the model instance. preference_structure_right= : accepts an array of hashes representing preference group data and assigns them to the model instance, setting their column to \"right\". preference_structure_json : returns a hash representing a preference group and its position. role_preference_group_assignments_attributes : accepts an array of hashes representing preference group data and returns a hash of attributes for use in mass assignment for the RolePreferenceGroupAssignment model. Examples of usage: class User < ApplicationRecord include HasPreferenceGroups end user = User","title":"HasPreferenceGroups"},{"location":"models/concern/#papertrailuser","text":"The PaperTrailUser module is a concern that adds a custom method to a model. The paper_trail_actor method accepts a user_type argument and defines a actor method on the model. The actor method returns an instance of the user_type class with an id equal to the value of the whodunnit attribute of the model. If the whodunnit attribute is not present, the actor method returns nil. Attributes: whodunnit : an attribute of the model that holds the id of the user who performed an action that resulted in a change to the model Relationships: None Custom methods: paper_trail_actor : Accepts a user_type argument and defines the actor method on the model. actor : Returns an instance of the user_type class with an id equal to the value of the whodunnit attribute of the model. If the whodunnit attribute is not present, returns nil. Example of usage: class User < ApplicationRecord include PaperTrailUser paper_trail_actor :user end user = User.create(name: 'Bob') # => #<User id: 1, name: 'Bob', whodunnit: 1>","title":"PaperTrailUser"},{"location":"models/concern/#versionstable","text":"The VersionsTable module is a Rails concern that allows you to specify the name of the table that should be used to store version records for a model. Attributes: None Relationships: None Custom methods: versions_table(versions_table_name): specifies the name of the table that should be used to store version records for the model Example of usage: class MyModel < ApplicationRecord include VersionsTable versions_table :my_model_versions end","title":"VersionsTable"},{"location":"models/personality/","text":"Food The Personality::Food class represents the food personality of a user. It is used to determine the frequency at which a user eats out per month. Attributes: @user : An instance of the User model representing the user whose food personality is being calculated. question: An instance of the Question model representing the question \"How many times per month do you eat out?\". answer : An instance of the Answer model representing the answer provided by the user to the question \"How many times per month do you eat out?\". Relationships: The Personality::Food class has a one-to-many relationship with the User model through the @user attribute. The Personality::Food class has a one-to-many relationship with the Question model through the question attribute. The Personality::Food class has a one-to-many relationship with the Answer model through the answer attribute. Custom methods: result : This method returns an integer value representing the user's food personality based on their answer to the question \"How many times per month do you eat out?\". Examples of usage: To determine the food personality of a user: user = User.find(1) food_personality = Personality::Food.new(user) food_personality_result = food_personality.result To determine the food personality of all users: users = User.all food_personalities = users.map do |user| Personality::Food.new(user) end food_personality_results = food_personalities.map(&:result) Lifestyle The Personality::Lifestyle class is a model that represents a user's lifestyle as determined by their answers to a questionnaire. It has a result method that returns an integer representing the user's lifestyle on a scale of 1 to 4, with 1 being the most economical and 4 being the most extravagant. The result method determines the user's lifestyle by looking up the answer to a specific question (whose title is stored in the constant TITLE) and returning a value based on the answer's values attribute. The question and answer methods are private and are used to retrieve the relevant question and answer objects from the database. The initialize method takes in a user object and sets it as an instance variable to be used in the question and answer methods. Wine The Personality::Wine class is a model that represents a user's preference for good wine. It contains a single method, result, which returns an integer based on the user's answer to a specific question about their wine preference. The result method checks the user's answer to the question and returns a corresponding integer value of 1 or 4. If the user's answer is \"No\", the method returns 1. If the user's answer is \"Yes\", the method returns 4. If the user has not provided an answer, the method returns 0. The Personality::Wine class also has a constant, TITLE, which stores the string \"Do you have a pallet for good wine?\". Attributes: @user : an instance variable that stores a reference to the user object. Relationships: The Personality::Wine class has a one-to-many relationship with the Answer model, through the @user attribute. Custom methods: result : a method that returns an integer based on the user's answer to a specific question about their wine preference. Examples of usage: user = User.find(1) personality_wine = Personality::Wine.new(user) result = personality_wine.result puts result # Outputs 1 or 4, depending on the user's answer to the question","title":"personality"},{"location":"models/personality/#food","text":"The Personality::Food class represents the food personality of a user. It is used to determine the frequency at which a user eats out per month. Attributes: @user : An instance of the User model representing the user whose food personality is being calculated. question: An instance of the Question model representing the question \"How many times per month do you eat out?\". answer : An instance of the Answer model representing the answer provided by the user to the question \"How many times per month do you eat out?\". Relationships: The Personality::Food class has a one-to-many relationship with the User model through the @user attribute. The Personality::Food class has a one-to-many relationship with the Question model through the question attribute. The Personality::Food class has a one-to-many relationship with the Answer model through the answer attribute. Custom methods: result : This method returns an integer value representing the user's food personality based on their answer to the question \"How many times per month do you eat out?\". Examples of usage: To determine the food personality of a user: user = User.find(1) food_personality = Personality::Food.new(user) food_personality_result = food_personality.result To determine the food personality of all users: users = User.all food_personalities = users.map do |user| Personality::Food.new(user) end food_personality_results = food_personalities.map(&:result)","title":"Food"},{"location":"models/personality/#lifestyle","text":"The Personality::Lifestyle class is a model that represents a user's lifestyle as determined by their answers to a questionnaire. It has a result method that returns an integer representing the user's lifestyle on a scale of 1 to 4, with 1 being the most economical and 4 being the most extravagant. The result method determines the user's lifestyle by looking up the answer to a specific question (whose title is stored in the constant TITLE) and returning a value based on the answer's values attribute. The question and answer methods are private and are used to retrieve the relevant question and answer objects from the database. The initialize method takes in a user object and sets it as an instance variable to be used in the question and answer methods.","title":"Lifestyle"},{"location":"models/personality/#wine","text":"The Personality::Wine class is a model that represents a user's preference for good wine. It contains a single method, result, which returns an integer based on the user's answer to a specific question about their wine preference. The result method checks the user's answer to the question and returns a corresponding integer value of 1 or 4. If the user's answer is \"No\", the method returns 1. If the user's answer is \"Yes\", the method returns 4. If the user has not provided an answer, the method returns 0. The Personality::Wine class also has a constant, TITLE, which stores the string \"Do you have a pallet for good wine?\". Attributes: @user : an instance variable that stores a reference to the user object. Relationships: The Personality::Wine class has a one-to-many relationship with the Answer model, through the @user attribute. Custom methods: result : a method that returns an integer based on the user's answer to a specific question about their wine preference. Examples of usage: user = User.find(1) personality_wine = Personality::Wine.new(user) result = personality_wine.result puts result # Outputs 1 or 4, depending on the user's answer to the question","title":"Wine"},{"location":"models/version/","text":"AnswerVersion The AnswerVersion model is a class that represents a version of an Answer object. It is responsible for storing changes made to an Answer object and recording metadata about these changes, such as the time they were made and the user who made them. Attributes: id : a unique integer identifier for the version item_type : a string indicating the type of object being versioned (in this case, Answer) item_id : an integer identifier for the Answer object being versioned event : a string indicating the type of change being made to the object (e.g. create, update, destroy) whodunnit : a string identifier for the user who made the change object : a JSON column containing the state of the Answer object at the time of the version object_changes : a JSON column containing the changes made to the object in this version ip_address : the IP address of the client making the change user_agent : the user agent of the client making the change created_at : a timestamp for when the version was created Relationships: AnswerVersion is related to Answer through the item_type and item_id columns. AnswerVersion has no custom methods. Base The Versions::Base class is a subclass of PaperTrail::Version, which is a model that stores the changes made to other models in your application. Versions::Base includes two concerns: PaperTrailUser and VersionsTable. PaperTrailUser provides a custom method called actor, which returns the user object associated with the version record. This is determined by the whodunnit field, which stores the ID of the user who made the change. actor fetches the user object with this ID and returns it. VersionsTable provides a class method called versions_table, which allows you to specify the name of the database table that should be used to store version records. This can be useful if you want to store version records in a table with a different name than the default, which is versions. Example usage: class User < ApplicationRecord has_paper_trail end user = User.create(name: 'John') user.update(name: 'Jane') version = Versions::Base.last version.actor # returns the user object who made the change QuestionVersion The QuestionVersion model is a class that extends the Base class in the Versions module. It represents the version of a Question object in the question_versions table in the database. The QuestionVersion model has the following attributes: id : a bigint representing the primary key of the record. item_type : a string representing the type of the object being versioned. In this case, it will always be \"Question\". item_id : a bigint representing the ID of the Question object being versioned. event : a string representing the type of event that caused the version to be created. This can be \"create\", \"update\", or \"destroy\". whodunnit : a string representing the ID of the user who caused the version to be created. object: a JSONB column representing the serialized version of the Question object at the time the version was created. object_changes : a JSONB column representing the changes made to the Question object between this version and the previous version. ip_address : an inet column representing the IP address of the user who caused the version to be created. user_agent : a string representing the user agent of the user who caused the version to be created. created_at : a datetime representing the time the version was created. The QuestionVersion model has the following custom methods: versions_table : a class method that sets the name of the table to be used for storing versions. paper_trail_actor : a class method that sets the type of user that caused the version to be created. UserAnswerVersion The model Versions::UserAnswerVersion is a subclass of Versions::Base. It stores information about versions of UserAnswer records. Versions::Base includes the PaperTrailUser and VersionsTable modules, which provide methods for accessing the actor responsible for creating a version and customizing the table name and sequence name of the model, respectively. Attributes: id : a unique identifier for the version item_type : the type of record that the version belongs to (in this case, \"UserAnswer\") item_id : the unique identifier of the record that the version belongs to event : the type of event that triggered the version creation (e.g. \"create\", \"update\", \"destroy\") whodunnit : a string representing the actor responsible for creating the version object : a JSON column storing the serialized version of the record object_changes : a JSON column storing the changes made to the record in this version ip_address : the IP address of the actor responsible for creating the version user_agent : the user agent of the actor responsible for creating the version created_at : the timestamp for when the version was created Relationships: None. Custom methods: paper_trail_actor(user_type) : a class method that defines a actor method on the model, which retrieves the actor responsible for creating the version. user_type is the type of actor that is expected (e.g. :vista_admin, :user). versions_table(versions_table_name) : a class method that sets the table_name and sequence_name class attributes to the specified versions_table_name. Example of usage: # Find the latest version of a user's answer with id 1 latest_version = Versions::UserAnswerVersion.where(item_id: 1).last # Print the event that triggered this version puts latest_version.event # Print the actor responsible for creating this version puts latest_version.actor.username # Print the changes made to the user's answer in this version puts latest_version.object_changes UserVersion The Versions::UserVersion class is a class representing a version of a user object. It is a subclass of the Versions::Base class which includes the PaperTrailUser and VersionsTable modules. Attributes: id : a bigint representing the primary key for the record. item_type : a string representing the type of item being tracked (in this case, \"User\"). item_id : a bigint representing the id of the user object being tracked. event : a string representing the type of change being tracked (e.g. \"create\", \"update\", \"destroy\"). whodunnit : a string representing the id of the user who made the change. object : a JSONB column representing the state of the user object at the time of the change. object_changes: a JSONB column representing the changes made to the user object at the time of the change. ip_address : an INET column representing the IP address of the user who made the change. user_agent : a string representing the user agent of the user who made the change. created_at : a datetime representing the time the change was made. Relationships: None. Custom methods: None, besides those inherited from the PaperTrailUser and VersionsTable modules. Examples of usage: When a user object is created, updated, or destroyed, a new Versions::UserVersion object is created and associated with the user object. The Versions::UserVersion class can be queried to retrieve a list of changes made to user objects over time.","title":"version"},{"location":"models/version/#answerversion","text":"The AnswerVersion model is a class that represents a version of an Answer object. It is responsible for storing changes made to an Answer object and recording metadata about these changes, such as the time they were made and the user who made them. Attributes: id : a unique integer identifier for the version item_type : a string indicating the type of object being versioned (in this case, Answer) item_id : an integer identifier for the Answer object being versioned event : a string indicating the type of change being made to the object (e.g. create, update, destroy) whodunnit : a string identifier for the user who made the change object : a JSON column containing the state of the Answer object at the time of the version object_changes : a JSON column containing the changes made to the object in this version ip_address : the IP address of the client making the change user_agent : the user agent of the client making the change created_at : a timestamp for when the version was created Relationships: AnswerVersion is related to Answer through the item_type and item_id columns. AnswerVersion has no custom methods.","title":"AnswerVersion"},{"location":"models/version/#base","text":"The Versions::Base class is a subclass of PaperTrail::Version, which is a model that stores the changes made to other models in your application. Versions::Base includes two concerns: PaperTrailUser and VersionsTable. PaperTrailUser provides a custom method called actor, which returns the user object associated with the version record. This is determined by the whodunnit field, which stores the ID of the user who made the change. actor fetches the user object with this ID and returns it. VersionsTable provides a class method called versions_table, which allows you to specify the name of the database table that should be used to store version records. This can be useful if you want to store version records in a table with a different name than the default, which is versions. Example usage: class User < ApplicationRecord has_paper_trail end user = User.create(name: 'John') user.update(name: 'Jane') version = Versions::Base.last version.actor # returns the user object who made the change","title":"Base"},{"location":"models/version/#questionversion","text":"The QuestionVersion model is a class that extends the Base class in the Versions module. It represents the version of a Question object in the question_versions table in the database. The QuestionVersion model has the following attributes: id : a bigint representing the primary key of the record. item_type : a string representing the type of the object being versioned. In this case, it will always be \"Question\". item_id : a bigint representing the ID of the Question object being versioned. event : a string representing the type of event that caused the version to be created. This can be \"create\", \"update\", or \"destroy\". whodunnit : a string representing the ID of the user who caused the version to be created. object: a JSONB column representing the serialized version of the Question object at the time the version was created. object_changes : a JSONB column representing the changes made to the Question object between this version and the previous version. ip_address : an inet column representing the IP address of the user who caused the version to be created. user_agent : a string representing the user agent of the user who caused the version to be created. created_at : a datetime representing the time the version was created. The QuestionVersion model has the following custom methods: versions_table : a class method that sets the name of the table to be used for storing versions. paper_trail_actor : a class method that sets the type of user that caused the version to be created.","title":"QuestionVersion"},{"location":"models/version/#useranswerversion","text":"The model Versions::UserAnswerVersion is a subclass of Versions::Base. It stores information about versions of UserAnswer records. Versions::Base includes the PaperTrailUser and VersionsTable modules, which provide methods for accessing the actor responsible for creating a version and customizing the table name and sequence name of the model, respectively. Attributes: id : a unique identifier for the version item_type : the type of record that the version belongs to (in this case, \"UserAnswer\") item_id : the unique identifier of the record that the version belongs to event : the type of event that triggered the version creation (e.g. \"create\", \"update\", \"destroy\") whodunnit : a string representing the actor responsible for creating the version object : a JSON column storing the serialized version of the record object_changes : a JSON column storing the changes made to the record in this version ip_address : the IP address of the actor responsible for creating the version user_agent : the user agent of the actor responsible for creating the version created_at : the timestamp for when the version was created Relationships: None. Custom methods: paper_trail_actor(user_type) : a class method that defines a actor method on the model, which retrieves the actor responsible for creating the version. user_type is the type of actor that is expected (e.g. :vista_admin, :user). versions_table(versions_table_name) : a class method that sets the table_name and sequence_name class attributes to the specified versions_table_name. Example of usage: # Find the latest version of a user's answer with id 1 latest_version = Versions::UserAnswerVersion.where(item_id: 1).last # Print the event that triggered this version puts latest_version.event # Print the actor responsible for creating this version puts latest_version.actor.username # Print the changes made to the user's answer in this version puts latest_version.object_changes","title":"UserAnswerVersion"},{"location":"models/version/#userversion","text":"The Versions::UserVersion class is a class representing a version of a user object. It is a subclass of the Versions::Base class which includes the PaperTrailUser and VersionsTable modules. Attributes: id : a bigint representing the primary key for the record. item_type : a string representing the type of item being tracked (in this case, \"User\"). item_id : a bigint representing the id of the user object being tracked. event : a string representing the type of change being tracked (e.g. \"create\", \"update\", \"destroy\"). whodunnit : a string representing the id of the user who made the change. object : a JSONB column representing the state of the user object at the time of the change. object_changes: a JSONB column representing the changes made to the user object at the time of the change. ip_address : an INET column representing the IP address of the user who made the change. user_agent : a string representing the user agent of the user who made the change. created_at : a datetime representing the time the change was made. Relationships: None. Custom methods: None, besides those inherited from the PaperTrailUser and VersionsTable modules. Examples of usage: When a user object is created, updated, or destroyed, a new Versions::UserVersion object is created and associated with the user object. The Versions::UserVersion class can be queried to retrieve a list of changes made to user objects over time.","title":"UserVersion"},{"location":"route/","text":"API POST /v1/login Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Body { \"email\": \"chris@kanso.io\", \"password\": \"password\" } Response 200 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"5f2469bc79d1ccf2cb0554ccf3314e3c\" X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 4014520d-7732-4bf3-8d42-8f31a1b2e3ec X-Runtime: 0.175549 Cache-Control: max-age=0, private, must-revalidate Transfer-Encoding: chunked Body {\"token\":\"<auth token>\",\"needsOnboarding\":false} POST /v1/register Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Body { \"email\": \"kathy.villeda@example.com\", \"password\": \"password\" } Response 200 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"d37626fa2db73f508eb6fb5c7ce71ca3\" X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: e7e24330-beac-48e4-abdb-3378d76fb214 X-Runtime: 0.362156 Cache-Control: max-age=0, private, must-revalidate Transfer-Encoding: chunked Body {\"token\":\"z89byAP37vpiouiZsPiAVmux\",\"needsOnboarding\":true} POST /v1/register Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Body { \"email\": \"test@test.com\", \"password\": \"password\" } Response 401 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 069b4a52-b0a1-4b57-831e-b1ff14ceef44 X-Runtime: 0.623524 Cache-Control: no-cache Transfer-Encoding: chunked Body {\"errors\":[{\"source\":{\"pointer\":\"/data/attributes/email\"},\"detail\":\"Email is already taken\"}]} GET /v1/me Request (application/json) Headers Accept: application/json Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.082517 X-Xss-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: fddcffef-bf97-43be-b16e-e143a19c2898 X-Content-Type-Options: nosniff Etag: W/\"e4675e989b64cd71d9e119f2d28a33cd\" X-Frame-Options: SAMEORIGIN Last-Modified: Tue, 10 Oct 2017 13:45:05 GMT Body {\"id\":2,\"email\":\"chris@kanso.io\",\"firstName\":\"Chris\",\"lastName\":\"Edwards\",\"name\":\"Chris Edwards\",\"jobTitle\":\"null\",\"company\":\"null\",\"address\":\"null\",\"memberId\":\"DnMZrZ\",\"updatedAt\":\"2017-10-10T13:45:05.089Z\",\"avatar\":{\"id\":54,\"largeUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/large_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=0d33cb46c3b0a49e1a1ab80097a8a84bff20149afdd39aa40256453b7035c502\",\"mediumUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/medium_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=ab95bbbb0e5b94ea3d8ca803f33bb1ba9e4e2e4ea778f80d41921131c3053051\",\"squareUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/square_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=17479710095e896416fc016cff48cf1adb0b3b5123ffc629813b5de922d872c1\",\"thumbUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/thumb_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=797ae5b7d962b92571213aeced23aca81d219d9dc55a4e47c4248b349ae1a82f\"}} PUT /v1/me Request (application/x-www-form-urlencoded; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body user%5Bname%5D=Chris+Edwards GET /v1/partners Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.240713 X-Xss-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: 1519535a-24fc-4c8e-ab36-f7fba864b551 X-Content-Type-Options: nosniff Etag: W/\"9b185923d3c6d3ae7d173461a960d9f0\" X-Frame-Options: SAMEORIGIN Body [{\"id\":1,\"name\":\"Park Hyatt New York\",\"about\":\"Across the street from Carnegie Hall, this sleek hotel in Midtown is a minute's walk from 57th Street subway station and a mile from the Lincoln Centre\",\"email\":\"\",\"latitude\":40.765605,\"longitude\":-73.97904,\"categories\":[\"Hotels\"],\"sharingProfile\":false,\"address\":{\"id\":43,\"label\":null,\"line1\":\"153 W 57th St\",\"line2\":\"\",\"town\":\"New York\",\"county\":\"NY\",\"postcode\":\"10019\",\"country\":\"US\",\"phone\":\"\",\"latitude\":\"40.765605\",\"longitude\":\"-73.97904\"},\"photo\":{\"id\":57,\"largeUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/large_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=e995f55a282fd2a6ce4271035a91ab20deceea76128b3ee60e4c1fcb43b141e1\",\"mediumUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/medium_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=95680861779a39adcedd0b7c50e52dc0c8cedd2c538bd4a1d66808ae47a37e3a\",\"squareUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/square_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=179a4651788d7cf9bbc0d75b73cefff44d14014762d07608c407ad6deffebc8e\",\"thumbUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/thumb_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=fac106dd72c2cbf8cc49f28d14ece447cc6be00c10e2c0099dd64235537307ce\"}}] POST /v1/partners/1/share Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 12481b72-4f85-4c34-b15a-78afabedd4b5 X-Runtime: 0.327847 Cache-Control: no-cache DELETE /v1/partners/1/revoke Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> DELETE /v1/partners/revoke Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 62078460-f384-4cfb-8eb0-5990c8eea40f X-Runtime: 0.044358 Cache-Control: no-cache GET /v1/categories Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers Last-Modified: Tue, 24 Oct 2017 13:46:07 GMT X-Runtime: 0.064698 Set-Cookie: _vista_platform_session=Y0VJa1NlVTNPQWIzZXdDSFNLc1RFOGlIemllMUZnaHM2dzUwSEJVNTBSNk5ob1NPU3NGVDExUkRLc2ZUcVhLS1d6NEJIbVRzL2VrcEltVGVRb3dsdXpZY0FNUjlYVDJPTU1BRlZud0Q1SGlUVFMrTVVxVWo0WVpxQ1o4Q2dML2IyUXVCaHVnVUhJOTc0Snl5K1E4YVN3PT0tLUl1OG1aWXUyVEw5RnJaRGJHaURjSWc9PQ%3D%3D--8ba94682a0d98648f7d6cb4d6d6ac3785fdc15a9; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: a60e1d64-8c16-4c49-b4f3-3dcee22c7fea X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"39062c091082b7fb83083db8c4ea041b\" X-Frame-Options: SAMEORIGIN Body [ { \"id\": 4222, \"title\": \"General\", \"description\": \"Maecenas faucibus mollis interdum. Nulla vitae elit libero, a pharetra augue. Nulla vitae elit libero, a pharetra augue. Aenean lacinia bibendum nulla sed consectetur. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Cras mattis consectetur purus sit amet fermentum.\", \"parentId\": 4211, \"hasChildren\": false, \"ancestry\": \"4211\", \"subtreeQuestionsCount\": 6, \"ignored\": false, \"position\": 1, \"initial\": false, \"visibilityConditions\": null, \"photo\": { \"id\": 4107, \"largeUrl\": \"http://assets.vista.test/uploads/photo/image/4107/large_440.jpeg\", \"mediumUrl\": \"http://assets.vista.test/uploads/photo/image/4107/medium_440.jpeg\", \"squareUrl\": \"http://assets.vista.test/uploads/photo/image/4107/square_440.jpeg\", \"thumbUrl\": \"http://assets.vista.test/uploads/photo/image/4107/thumb_440.jpeg\" } }, { \"id\": 4213, \"title\": \"Parking\", \"description\": \"Maecenas faucibus mollis interdum. Nulla vitae elit libero, a pharetra augue. Nulla vitae elit libero, a pharetra augue. Aenean lacinia bibendum nulla sed consectetur. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Cras mattis consectetur purus sit amet fermentum.\", \"parentId\": 4211, \"hasChildren\": false, \"ancestry\": \"4211\", \"subtreeQuestionsCount\": 2, \"ignored\": false, \"position\": 2, \"initial\": false, \"visibilityConditions\": null, \"photo\": { \"id\": 4104, \"largeUrl\": \"http://assets.vista.test/uploads/photo/image/4104/large_440.jpeg\", \"mediumUrl\": \"http://assets.vista.test/uploads/photo/image/4104/medium_440.jpeg\", \"squareUrl\": \"http://assets.vista.test/uploads/photo/image/4104/square_440.jpeg\", \"thumbUrl\": \"http://assets.vista.test/uploads/photo/image/4104/thumb_440.jpeg\" } } ] GET /v1/questions Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers Last-Modified: Fri, 20 Oct 2017 15:10:59 GMT X-Runtime: 16.743717 Set-Cookie: _vista_platform_session=SExnWlI2czdiNmRUOHF2WkJMcThteXkyMEw2Kzliekh2RFQ1eFY5MmpINXB0ZnJMcVhYb3FqTFA4UlZwZFJTdVRWK2ptVUgvdFkrQ1kvTHBjRFVELyt4SU1VZW5DRG5pQStTdVlpZ1JnaU40M0JBZDBTUXVpUGxvci81RDRUOVlBSkl2dkNvUWQreDV1M3V0a1g0My9BPT0tLURLR0xJeHNYajJ6cWd4MU85TlF2aHc9PQ%3D%3D--a3ffad65f936408151f08d22e03ac77aff229d92; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: 72c8a29e-6574-4728-8603-896b313b621d X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"521fefadcabf9349305b98d53243afd6\" X-Frame-Options: SAMEORIGIN Body [ { \"id\": 283, \"title\": \"Eos porro sequi velit.?\", \"categoryId\": 4222, \"kind\": \"time\", \"lockingConditions\": null, \"intro\": false, \"allowsNote\": true, \"noteTitle\": null, \"visibilityConditions\": [], \"photo\": null, \"answers\": [] }, { \"id\": 284, \"title\": \"Error blanditiis et in et iure non laboriosam.?\", \"categoryId\": 4222, \"kind\": \"option\", \"lockingConditions\": null, \"intro\": false, \"allowsNote\": true, \"noteTitle\": null, \"visibilityConditions\": [], \"photo\": null, \"answers\": [ { \"id\": 551, \"title\": \"Quia et repellat sit.\", \"description\": \"Dolores vel qui laudantium beatae eum et nemo. Explicabo inventore deserunt consequatur aut ipsam doloremque. Quo repellat fuga nobis atque. Officia vel libero. Velit non ratione sint odio enim fuga.\", \"photo\": null }, { \"id\": 550, \"title\": \"Eaque inventore aut voluptas et placeat sit.\", \"description\": \"Aspernatur hic ea voluptas quidem quos. Commodi laboriosam dolores architecto facere eum deserunt ut. Voluptates et minima exercitationem dolores enim. Tempora sed fugit omnis et.\", \"photo\": null }, { \"id\": 549, \"title\": \"Nihil aut blanditiis rerum harum animi incidunt voluptatem adipisci.\", \"description\": \"Repellendus aut autem voluptatem veniam. Suscipit enim labore dignissimos et. Occaecati dolor labore voluptas et sed.\", \"photo\": null } ] } ] GET /v1/news Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.099705 Set-Cookie: _vista_platform_session=<vista token>; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: a4f77782-aa40-446d-9554-52e336b9f46c X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN Etag: W/\"657c4fa5eae94aa1fcfc41f72713078b\" Body [{\"id\":3,\"title\":\"Reprehenderit quae rerum voluptatibus consequatur molestiae.\",\"content\":\"Ut natus alias sit quas a. Nulla pariatur voluptatem esse labore explicabo ut soluta. Quaerat corrupti consequatur asperiores quam veniam animi reprehenderit. Neque et excepturi non consequatur iure dolore.\",\"publishAt\":\"2017-10-25T14:44:11.965Z\",\"headerImage\":null},{\"id\":2,\"title\":\"Consequatur architecto est quos.\",\"content\":\"Quidem voluptates numquam. Eum dolor commodi ullam ducimus voluptatem. Sint cumque aut id ut quo. Error aut dolore ut non maxime. Tempora necessitatibus debitis alias omnis ad unde.\",\"publishAt\":\"2017-10-25T14:44:01.694Z\",\"headerImage\":null},{\"id\":1,\"title\":\"In et et rerum.\",\"content\":\"Quas et voluptates qui reprehenderit. Fugit id molestiae exercitationem libero. At nihil consequatur soluta.\",\"publishAt\":\"2017-10-25T14:42:52.127Z\",\"headerImage\":null}] GET /v1/sync Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.012769 Set-Cookie: _vista_platform_session=QkdSYXI4YXVITU55SExTUWNqNzYybG5TTHZjellOUm1hVU1tVEF5QjZYcmlXVCtkY3NIZzJpekJ2czkrbVYycUlIOGFmdUJ0THMxOHViMTgyN04xV2t3WkxzYm5jUjNCY0FCcUliMWZ2OXJvQktxVndobUkyS2pmdjY5TmdwOVUwcHhzUnljSHNFd2JDaEFheGZhSjVnPT0tLUhxZjl5eVF3VEZ0SHd1c09aN3pYU0E9PQ%3D%3D--5ae00d544a9d7b536593a35d8502990225f7ef04; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: 9b750da0-28fb-4fc8-91fe-888632876df6 X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN Etag: W/\"cde515396cfa9a18a4df24f4ba428ae5\" Body {\"answers\":[{\"questionId\":23,\"updatedAt\":\"2017-09-19T15:33:00.033Z\"},{\"questionId\":25,\"updatedAt\":\"2017-09-20T12:13:44.437Z\"},{\"questionId\":34,\"updatedAt\":\"2017-09-20T12:17:08.956Z\"},{\"questionId\":26,\"updatedAt\":\"2017-09-20T12:18:19.558Z\"},{\"questionId\":36,\"updatedAt\":\"2017-09-20T12:29:00.676Z\"},{\"questionId\":27,\"updatedAt\":\"2017-09-22T11:58:21.974Z\"},{\"questionId\":28,\"updatedAt\":\"2017-09-22T11:59:07.897Z\"},{\"questionId\":30,\"updatedAt\":\"2017-09-22T11:59:12.029Z\"},{\"questionId\":32,\"updatedAt\":\"2017-09-22T11:59:18.110Z\"},{\"questionId\":29,\"updatedAt\":\"2017-09-22T12:00:01.611Z\"},{\"questionId\":33,\"updatedAt\":\"2017-09-22T12:00:15.490Z\"},{\"questionId\":31,\"updatedAt\":\"2017-09-22T12:00:24.099Z\"},{\"questionId\":35,\"updatedAt\":\"2017-09-22T12:15:22.340Z\"},{\"questionId\":19,\"updatedAt\":\"2017-09-22T12:35:47.546Z\"},{\"questionId\":20,\"updatedAt\":\"2017-09-22T12:35:50.356Z\"},{\"questionId\":21,\"updatedAt\":\"2017-09-22T12:36:02.139Z\"},{\"questionId\":22,\"updatedAt\":\"2017-09-22T12:36:06.128Z\"},{\"questionId\":37,\"updatedAt\":\"2017-09-25T10:54:56.570Z\"},{\"questionId\":38,\"updatedAt\":\"2017-09-25T10:54:58.493Z\"},{\"questionId\":24,\"updatedAt\":\"2017-09-25T13:32:55.687Z\"},{\"questionId\":39,\"updatedAt\":\"2017-09-25T14:09:28.693Z\"},{\"questionId\":40,\"updatedAt\":\"2017-09-25T14:09:29.674Z\"},{\"questionId\":41,\"updatedAt\":\"2017-09-25T14:09:30.527Z\"},{\"questionId\":44,\"updatedAt\":\"2017-09-29T08:32:07.403Z\"}]} POST /v1/sync Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body { \"update\": [ { \"questionId\": 23, \"values\": \"Online!\", \"note\": null } ], \"get\": [ 34, 26, 36 ], \"delete\": [ 24 ], \"add\": [ { \"questionId\": 24, \"values\": \"Less than $1000\" } ] } Response 200 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"7a6c0435085bc365fd48af39a659c339\" X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 74d19483-7955-4cfd-995c-625bed55abd5 X-Runtime: 0.664534 Cache-Control: max-age=0, private, must-revalidate Transfer-Encoding: chunked Body [{\"id\":15,\"questionId\":34,\"values\":\"No\",\"note\":null,\"synced\":true}, {\"id\":16,\"questionId\":26,\"values\":\"Yes\",\"note\":null,\"synced\":true}, {\"id\":18,\"questionId\":36,\"values\":\"First floor\",\"note\":null \"synced\":true} ] POST /v1/categories/4222/ignore Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: e30ae883-45c7-4e0b-a186-adc8347802b5 X-Runtime: 0.016333 Cache-Control: no-cache DELETE /v1/categories/4222/ignore Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: db00018d-bd1a-4621-801d-300f2bb569f6 X-Runtime: 0.014774 Cache-Control: no-cache POST /v1/password/reset Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body { \"email\": \"foo\" } Response 400 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: ad3bcf39-eea9-4526-9ada-85e95c1afbbc X-Runtime: 0.007599 Cache-Control: no-cache Transfer-Encoding: chunked Body {\"errors\":[{\"detail\":\"No user found for request\"}]} PUT /v1/password/reset Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body { \"token\": \"bad\", \"password\": \"password\", \"password_confirmation\": \"password\" } Response 400 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 4fb7572f-38c4-4a99-a033-e01466874fc6 X-Runtime: 0.013222 Cache-Control: no-cache Transfer-Encoding: chunked Body {\"errors\":{\"token\":\"Password reset token invalid\"}}","title":"Index"},{"location":"route/#api","text":"","title":"API"},{"location":"route/#post-v1login","text":"Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Body { \"email\": \"chris@kanso.io\", \"password\": \"password\" } Response 200 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"5f2469bc79d1ccf2cb0554ccf3314e3c\" X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 4014520d-7732-4bf3-8d42-8f31a1b2e3ec X-Runtime: 0.175549 Cache-Control: max-age=0, private, must-revalidate Transfer-Encoding: chunked Body {\"token\":\"<auth token>\",\"needsOnboarding\":false}","title":"POST /v1/login"},{"location":"route/#post-v1register","text":"Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Body { \"email\": \"kathy.villeda@example.com\", \"password\": \"password\" } Response 200 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"d37626fa2db73f508eb6fb5c7ce71ca3\" X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: e7e24330-beac-48e4-abdb-3378d76fb214 X-Runtime: 0.362156 Cache-Control: max-age=0, private, must-revalidate Transfer-Encoding: chunked Body {\"token\":\"z89byAP37vpiouiZsPiAVmux\",\"needsOnboarding\":true}","title":"POST /v1/register"},{"location":"route/#post-v1register_1","text":"Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Body { \"email\": \"test@test.com\", \"password\": \"password\" } Response 401 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 069b4a52-b0a1-4b57-831e-b1ff14ceef44 X-Runtime: 0.623524 Cache-Control: no-cache Transfer-Encoding: chunked Body {\"errors\":[{\"source\":{\"pointer\":\"/data/attributes/email\"},\"detail\":\"Email is already taken\"}]}","title":"POST /v1/register"},{"location":"route/#get-v1me","text":"Request (application/json) Headers Accept: application/json Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.082517 X-Xss-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: fddcffef-bf97-43be-b16e-e143a19c2898 X-Content-Type-Options: nosniff Etag: W/\"e4675e989b64cd71d9e119f2d28a33cd\" X-Frame-Options: SAMEORIGIN Last-Modified: Tue, 10 Oct 2017 13:45:05 GMT Body {\"id\":2,\"email\":\"chris@kanso.io\",\"firstName\":\"Chris\",\"lastName\":\"Edwards\",\"name\":\"Chris Edwards\",\"jobTitle\":\"null\",\"company\":\"null\",\"address\":\"null\",\"memberId\":\"DnMZrZ\",\"updatedAt\":\"2017-10-10T13:45:05.089Z\",\"avatar\":{\"id\":54,\"largeUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/large_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=0d33cb46c3b0a49e1a1ab80097a8a84bff20149afdd39aa40256453b7035c502\",\"mediumUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/medium_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=ab95bbbb0e5b94ea3d8ca803f33bb1ba9e4e2e4ea778f80d41921131c3053051\",\"squareUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/square_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=17479710095e896416fc016cff48cf1adb0b3b5123ffc629813b5de922d872c1\",\"thumbUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/54/thumb_photo.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171011T094219Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171011/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=797ae5b7d962b92571213aeced23aca81d219d9dc55a4e47c4248b349ae1a82f\"}}","title":"GET /v1/me"},{"location":"route/#put-v1me","text":"Request (application/x-www-form-urlencoded; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body user%5Bname%5D=Chris+Edwards","title":"PUT /v1/me"},{"location":"route/#get-v1partners","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.240713 X-Xss-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: 1519535a-24fc-4c8e-ab36-f7fba864b551 X-Content-Type-Options: nosniff Etag: W/\"9b185923d3c6d3ae7d173461a960d9f0\" X-Frame-Options: SAMEORIGIN Body [{\"id\":1,\"name\":\"Park Hyatt New York\",\"about\":\"Across the street from Carnegie Hall, this sleek hotel in Midtown is a minute's walk from 57th Street subway station and a mile from the Lincoln Centre\",\"email\":\"\",\"latitude\":40.765605,\"longitude\":-73.97904,\"categories\":[\"Hotels\"],\"sharingProfile\":false,\"address\":{\"id\":43,\"label\":null,\"line1\":\"153 W 57th St\",\"line2\":\"\",\"town\":\"New York\",\"county\":\"NY\",\"postcode\":\"10019\",\"country\":\"US\",\"phone\":\"\",\"latitude\":\"40.765605\",\"longitude\":\"-73.97904\"},\"photo\":{\"id\":57,\"largeUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/large_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=e995f55a282fd2a6ce4271035a91ab20deceea76128b3ee60e4c1fcb43b141e1\",\"mediumUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/medium_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=95680861779a39adcedd0b7c50e52dc0c8cedd2c538bd4a1d66808ae47a37e3a\",\"squareUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/square_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=179a4651788d7cf9bbc0d75b73cefff44d14014762d07608c407ad6deffebc8e\",\"thumbUrl\":\"https://bucketeer-5fb9bfbe-c595-490e-8a9e-f78c342d65bf.s3-eu-west-1.amazonaws.com/uploads/photo/image/57/thumb_Park_Hyatt_New_York_usn_2.jpg?X-Amz-Expires=600\\u0026X-Amz-Date=20171018T110152Z\\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\\u0026X-Amz-Credential=AKIAID6MULWOTL2HSBXQ/20171018/eu-west-1/s3/aws4_request\\u0026X-Amz-SignedHeaders=host\\u0026X-Amz-Signature=fac106dd72c2cbf8cc49f28d14ece447cc6be00c10e2c0099dd64235537307ce\"}}]","title":"GET /v1/partners"},{"location":"route/#post-v1partners1share","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 12481b72-4f85-4c34-b15a-78afabedd4b5 X-Runtime: 0.327847 Cache-Control: no-cache","title":"POST /v1/partners/1/share"},{"location":"route/#delete-v1partners1revoke","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token>","title":"DELETE /v1/partners/1/revoke"},{"location":"route/#delete-v1partnersrevoke","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 62078460-f384-4cfb-8eb0-5990c8eea40f X-Runtime: 0.044358 Cache-Control: no-cache","title":"DELETE /v1/partners/revoke"},{"location":"route/#get-v1categories","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers Last-Modified: Tue, 24 Oct 2017 13:46:07 GMT X-Runtime: 0.064698 Set-Cookie: _vista_platform_session=Y0VJa1NlVTNPQWIzZXdDSFNLc1RFOGlIemllMUZnaHM2dzUwSEJVNTBSNk5ob1NPU3NGVDExUkRLc2ZUcVhLS1d6NEJIbVRzL2VrcEltVGVRb3dsdXpZY0FNUjlYVDJPTU1BRlZud0Q1SGlUVFMrTVVxVWo0WVpxQ1o4Q2dML2IyUXVCaHVnVUhJOTc0Snl5K1E4YVN3PT0tLUl1OG1aWXUyVEw5RnJaRGJHaURjSWc9PQ%3D%3D--8ba94682a0d98648f7d6cb4d6d6ac3785fdc15a9; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: a60e1d64-8c16-4c49-b4f3-3dcee22c7fea X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"39062c091082b7fb83083db8c4ea041b\" X-Frame-Options: SAMEORIGIN Body [ { \"id\": 4222, \"title\": \"General\", \"description\": \"Maecenas faucibus mollis interdum. Nulla vitae elit libero, a pharetra augue. Nulla vitae elit libero, a pharetra augue. Aenean lacinia bibendum nulla sed consectetur. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Cras mattis consectetur purus sit amet fermentum.\", \"parentId\": 4211, \"hasChildren\": false, \"ancestry\": \"4211\", \"subtreeQuestionsCount\": 6, \"ignored\": false, \"position\": 1, \"initial\": false, \"visibilityConditions\": null, \"photo\": { \"id\": 4107, \"largeUrl\": \"http://assets.vista.test/uploads/photo/image/4107/large_440.jpeg\", \"mediumUrl\": \"http://assets.vista.test/uploads/photo/image/4107/medium_440.jpeg\", \"squareUrl\": \"http://assets.vista.test/uploads/photo/image/4107/square_440.jpeg\", \"thumbUrl\": \"http://assets.vista.test/uploads/photo/image/4107/thumb_440.jpeg\" } }, { \"id\": 4213, \"title\": \"Parking\", \"description\": \"Maecenas faucibus mollis interdum. Nulla vitae elit libero, a pharetra augue. Nulla vitae elit libero, a pharetra augue. Aenean lacinia bibendum nulla sed consectetur. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Cras mattis consectetur purus sit amet fermentum.\", \"parentId\": 4211, \"hasChildren\": false, \"ancestry\": \"4211\", \"subtreeQuestionsCount\": 2, \"ignored\": false, \"position\": 2, \"initial\": false, \"visibilityConditions\": null, \"photo\": { \"id\": 4104, \"largeUrl\": \"http://assets.vista.test/uploads/photo/image/4104/large_440.jpeg\", \"mediumUrl\": \"http://assets.vista.test/uploads/photo/image/4104/medium_440.jpeg\", \"squareUrl\": \"http://assets.vista.test/uploads/photo/image/4104/square_440.jpeg\", \"thumbUrl\": \"http://assets.vista.test/uploads/photo/image/4104/thumb_440.jpeg\" } } ]","title":"GET /v1/categories"},{"location":"route/#get-v1questions","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers Last-Modified: Fri, 20 Oct 2017 15:10:59 GMT X-Runtime: 16.743717 Set-Cookie: _vista_platform_session=SExnWlI2czdiNmRUOHF2WkJMcThteXkyMEw2Kzliekh2RFQ1eFY5MmpINXB0ZnJMcVhYb3FqTFA4UlZwZFJTdVRWK2ptVUgvdFkrQ1kvTHBjRFVELyt4SU1VZW5DRG5pQStTdVlpZ1JnaU40M0JBZDBTUXVpUGxvci81RDRUOVlBSkl2dkNvUWQreDV1M3V0a1g0My9BPT0tLURLR0xJeHNYajJ6cWd4MU85TlF2aHc9PQ%3D%3D--a3ffad65f936408151f08d22e03ac77aff229d92; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: 72c8a29e-6574-4728-8603-896b313b621d X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"521fefadcabf9349305b98d53243afd6\" X-Frame-Options: SAMEORIGIN Body [ { \"id\": 283, \"title\": \"Eos porro sequi velit.?\", \"categoryId\": 4222, \"kind\": \"time\", \"lockingConditions\": null, \"intro\": false, \"allowsNote\": true, \"noteTitle\": null, \"visibilityConditions\": [], \"photo\": null, \"answers\": [] }, { \"id\": 284, \"title\": \"Error blanditiis et in et iure non laboriosam.?\", \"categoryId\": 4222, \"kind\": \"option\", \"lockingConditions\": null, \"intro\": false, \"allowsNote\": true, \"noteTitle\": null, \"visibilityConditions\": [], \"photo\": null, \"answers\": [ { \"id\": 551, \"title\": \"Quia et repellat sit.\", \"description\": \"Dolores vel qui laudantium beatae eum et nemo. Explicabo inventore deserunt consequatur aut ipsam doloremque. Quo repellat fuga nobis atque. Officia vel libero. Velit non ratione sint odio enim fuga.\", \"photo\": null }, { \"id\": 550, \"title\": \"Eaque inventore aut voluptas et placeat sit.\", \"description\": \"Aspernatur hic ea voluptas quidem quos. Commodi laboriosam dolores architecto facere eum deserunt ut. Voluptates et minima exercitationem dolores enim. Tempora sed fugit omnis et.\", \"photo\": null }, { \"id\": 549, \"title\": \"Nihil aut blanditiis rerum harum animi incidunt voluptatem adipisci.\", \"description\": \"Repellendus aut autem voluptatem veniam. Suscipit enim labore dignissimos et. Occaecati dolor labore voluptas et sed.\", \"photo\": null } ] } ]","title":"GET /v1/questions"},{"location":"route/#get-v1news","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.099705 Set-Cookie: _vista_platform_session=<vista token>; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: a4f77782-aa40-446d-9554-52e336b9f46c X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN Etag: W/\"657c4fa5eae94aa1fcfc41f72713078b\" Body [{\"id\":3,\"title\":\"Reprehenderit quae rerum voluptatibus consequatur molestiae.\",\"content\":\"Ut natus alias sit quas a. Nulla pariatur voluptatem esse labore explicabo ut soluta. Quaerat corrupti consequatur asperiores quam veniam animi reprehenderit. Neque et excepturi non consequatur iure dolore.\",\"publishAt\":\"2017-10-25T14:44:11.965Z\",\"headerImage\":null},{\"id\":2,\"title\":\"Consequatur architecto est quos.\",\"content\":\"Quidem voluptates numquam. Eum dolor commodi ullam ducimus voluptatem. Sint cumque aut id ut quo. Error aut dolore ut non maxime. Tempora necessitatibus debitis alias omnis ad unde.\",\"publishAt\":\"2017-10-25T14:44:01.694Z\",\"headerImage\":null},{\"id\":1,\"title\":\"In et et rerum.\",\"content\":\"Quas et voluptates qui reprehenderit. Fugit id molestiae exercitationem libero. At nihil consequatur soluta.\",\"publishAt\":\"2017-10-25T14:42:52.127Z\",\"headerImage\":null}]","title":"GET /v1/news"},{"location":"route/#get-v1sync","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 200 (application/json; charset=utf-8) Headers X-Runtime: 0.012769 Set-Cookie: _vista_platform_session=QkdSYXI4YXVITU55SExTUWNqNzYybG5TTHZjellOUm1hVU1tVEF5QjZYcmlXVCtkY3NIZzJpekJ2czkrbVYycUlIOGFmdUJ0THMxOHViMTgyN04xV2t3WkxzYm5jUjNCY0FCcUliMWZ2OXJvQktxVndobUkyS2pmdjY5TmdwOVUwcHhzUnljSHNFd2JDaEFheGZhSjVnPT0tLUhxZjl5eVF3VEZ0SHd1c09aN3pYU0E9PQ%3D%3D--5ae00d544a9d7b536593a35d8502990225f7ef04; path=/; HttpOnly X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked Cache-Control: max-age=0, private, must-revalidate X-Request-Id: 9b750da0-28fb-4fc8-91fe-888632876df6 X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN Etag: W/\"cde515396cfa9a18a4df24f4ba428ae5\" Body {\"answers\":[{\"questionId\":23,\"updatedAt\":\"2017-09-19T15:33:00.033Z\"},{\"questionId\":25,\"updatedAt\":\"2017-09-20T12:13:44.437Z\"},{\"questionId\":34,\"updatedAt\":\"2017-09-20T12:17:08.956Z\"},{\"questionId\":26,\"updatedAt\":\"2017-09-20T12:18:19.558Z\"},{\"questionId\":36,\"updatedAt\":\"2017-09-20T12:29:00.676Z\"},{\"questionId\":27,\"updatedAt\":\"2017-09-22T11:58:21.974Z\"},{\"questionId\":28,\"updatedAt\":\"2017-09-22T11:59:07.897Z\"},{\"questionId\":30,\"updatedAt\":\"2017-09-22T11:59:12.029Z\"},{\"questionId\":32,\"updatedAt\":\"2017-09-22T11:59:18.110Z\"},{\"questionId\":29,\"updatedAt\":\"2017-09-22T12:00:01.611Z\"},{\"questionId\":33,\"updatedAt\":\"2017-09-22T12:00:15.490Z\"},{\"questionId\":31,\"updatedAt\":\"2017-09-22T12:00:24.099Z\"},{\"questionId\":35,\"updatedAt\":\"2017-09-22T12:15:22.340Z\"},{\"questionId\":19,\"updatedAt\":\"2017-09-22T12:35:47.546Z\"},{\"questionId\":20,\"updatedAt\":\"2017-09-22T12:35:50.356Z\"},{\"questionId\":21,\"updatedAt\":\"2017-09-22T12:36:02.139Z\"},{\"questionId\":22,\"updatedAt\":\"2017-09-22T12:36:06.128Z\"},{\"questionId\":37,\"updatedAt\":\"2017-09-25T10:54:56.570Z\"},{\"questionId\":38,\"updatedAt\":\"2017-09-25T10:54:58.493Z\"},{\"questionId\":24,\"updatedAt\":\"2017-09-25T13:32:55.687Z\"},{\"questionId\":39,\"updatedAt\":\"2017-09-25T14:09:28.693Z\"},{\"questionId\":40,\"updatedAt\":\"2017-09-25T14:09:29.674Z\"},{\"questionId\":41,\"updatedAt\":\"2017-09-25T14:09:30.527Z\"},{\"questionId\":44,\"updatedAt\":\"2017-09-29T08:32:07.403Z\"}]}","title":"GET /v1/sync"},{"location":"route/#post-v1sync","text":"Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body { \"update\": [ { \"questionId\": 23, \"values\": \"Online!\", \"note\": null } ], \"get\": [ 34, 26, 36 ], \"delete\": [ 24 ], \"add\": [ { \"questionId\": 24, \"values\": \"Less than $1000\" } ] } Response 200 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin Etag: W/\"7a6c0435085bc365fd48af39a659c339\" X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 74d19483-7955-4cfd-995c-625bed55abd5 X-Runtime: 0.664534 Cache-Control: max-age=0, private, must-revalidate Transfer-Encoding: chunked Body [{\"id\":15,\"questionId\":34,\"values\":\"No\",\"note\":null,\"synced\":true}, {\"id\":16,\"questionId\":26,\"values\":\"Yes\",\"note\":null,\"synced\":true}, {\"id\":18,\"questionId\":36,\"values\":\"First floor\",\"note\":null \"synced\":true} ]","title":"POST /v1/sync"},{"location":"route/#post-v1categories4222ignore","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: e30ae883-45c7-4e0b-a186-adc8347802b5 X-Runtime: 0.016333 Cache-Control: no-cache","title":"POST /v1/categories/4222/ignore"},{"location":"route/#delete-v1categories4222ignore","text":"Request Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Response 204 Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: db00018d-bd1a-4621-801d-300f2bb569f6 X-Runtime: 0.014774 Cache-Control: no-cache","title":"DELETE /v1/categories/4222/ignore"},{"location":"route/#post-v1passwordreset","text":"Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body { \"email\": \"foo\" } Response 400 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: ad3bcf39-eea9-4526-9ada-85e95c1afbbc X-Runtime: 0.007599 Cache-Control: no-cache Transfer-Encoding: chunked Body {\"errors\":[{\"detail\":\"No user found for request\"}]}","title":"POST /v1/password/reset"},{"location":"route/#put-v1passwordreset","text":"Request (application/json; charset=utf-8) Headers Cookie: _vista_platform_session=<vista token> Authorization: Token token=<auth token> Body { \"token\": \"bad\", \"password\": \"password\", \"password_confirmation\": \"password\" } Response 400 (application/json; charset=utf-8) Headers X-Content-Type-Options: nosniff X-Rack-CORS: miss; no-origin X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Request-Id: 4fb7572f-38c4-4a99-a033-e01466874fc6 X-Runtime: 0.013222 Cache-Control: no-cache Transfer-Encoding: chunked Body {\"errors\":{\"token\":\"Password reset token invalid\"}}","title":"PUT /v1/password/reset"}]}